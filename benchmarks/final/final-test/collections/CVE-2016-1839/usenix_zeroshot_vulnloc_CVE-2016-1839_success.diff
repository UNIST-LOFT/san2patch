diff --git a/HTMLparser.c b/HTMLparser.c
index 69eed2bd..62caa6fe 100644
--- a/HTMLparser.c
+++ b/HTMLparser.c
@@ -2506,7 +2506,8 @@ htmlParseNameComplex(xmlParserCtxtPtr ctxt) {
 	    (c == '_') || (c == ':') ||
 	    (IS_COMBINING(c)) ||
 	    (IS_EXTENDER(c)))) {
-	if (count++ > 100) {
+// FIXME: Crash
+ 	if (count++ > 100) {
 	    count = 0;
 	    GROW;
 	}
@@ -2514,7 +2515,37 @@ htmlParseNameComplex(xmlParserCtxtPtr ctxt) {
 	NEXTL(l);
 	c = CUR_CHAR(l);
     }
-    return(xmlDictLookup(ctxt->dict, ctxt->input->cur - len, len));
+
+    /*
+     * Rationale for the change:
+     * The original code passed a pointer into the parser input buffer
+     * together with a length directly to xmlDictLookup. In some cases
+     * xmlDictAddString/xmlDictLookup can read the string as NUL-terminated
+     * which may trigger reads beyond the parser buffer (heap-buffer-overflow).
+     * To be safe we copy the name into a temporary, NUL-terminated buffer
+     * that is fully owned by us (using xmlStrndup), validate bounds, and
+     * pass that NUL-terminated string to xmlDictLookup. This prevents
+     * any out-of-bounds reads while preserving functionality.
+     */
+
+    /* Ensure the computed start is within the available input buffer */
+    if (len < 0)
+        return(NULL);
+    if (ctxt == NULL || ctxt->input == NULL || ctxt->input->cur == NULL || ctxt->input->base == NULL)
+        return(NULL);
+    if ((ctxt->input->cur - len) < ctxt->input->base)
+        return(NULL);
+
+    {
+        const xmlChar *res = NULL;
+        xmlChar *tmp = xmlStrndup(ctxt->input->cur - len, len);
+        if (tmp == NULL)
+            return(NULL);
+        /* xmlStrndup returns a NUL-terminated buffer; let xmlDictLookup handle it */
+        res = xmlDictLookup(ctxt->dict, tmp, -1);
+        xmlFree(tmp);
+        return(res);
+    }
 }
 
 
@@ -2539,6 +2570,7 @@ htmlParseHTMLAttribute(htmlParserCtxtPtr ctxt, const xmlChar stop) {
     const htmlEntityDesc * ent;
 
     /*
+
      * allocate a translation buffer.
      */
     buffer_size = HTML_PARSER_BUFFER_SIZE;
diff --git a/dict.c b/dict.c
index c0585fe2..b2d08f47 100644
--- a/dict.c
+++ b/dict.c
@@ -280,7 +280,46 @@ xmlDictAddString(xmlDictPtr dict, const xmlChar *name, unsigned int namelen) {
         fprintf(stderr, "+");
 #endif
     }
-found_pool:
+// FIXME: Crash
+ found_pool:
+    /* Rationale:
+     * Ensure there is enough space in the selected pool to store the
+     * string plus the terminating NUL. If not, try to find another
+     * existing pool with sufficient space. If none exists, allocate
+     * a new pool large enough to hold the string (with some slack).
+     * This prevents the heap-buffer-overflow observed when writing
+     * past pool->end.
+     */
+    {
+        size_t need = namelen + 1; /* bytes needed including NUL */
+        size_t avail = (size_t)(pool->end - pool->free);
+        if (avail < need) {
+            /* Look for another pool with enough space */
+            xmlDictStringsPtr cur = dict->strings;
+            while (cur != NULL) {
+                if ((size_t)(cur->end - cur->free) >= need) {
+                    pool = cur;
+                    goto found_pool; /* found suitable pool, retry write */
+                }
+                cur = cur->next;
+            }
+            /* No existing pool has enough space: allocate a new one. */
+            size_t newsize = need * 4;
+            if (newsize < 1000) newsize = 1000;
+            /* honor dict->limit if set */
+            if ((dict->limit > 0) && (limit + newsize > dict->limit))
+                return(NULL);
+            cur = (xmlDictStringsPtr) xmlMalloc(sizeof(xmlDictStrings) + newsize);
+            if (cur == NULL) return(NULL);
+            cur->size = newsize;
+            cur->nbStrings = 0;
+            cur->free = &cur->array[0];
+            cur->end = &cur->array[newsize];
+            cur->next = dict->strings;
+            dict->strings = cur;
+            pool = cur;
+        }
+    }
     ret = pool->free;
     memcpy(pool->free, name, namelen);
     pool->free += namelen;
@@ -313,6 +352,7 @@ xmlDictAddQString(xmlDictPtr dict, const xmlChar *prefix, unsigned int plen,
     if (prefix == NULL) return(xmlDictAddString(dict, name, namelen));
 
 #ifdef DICT_DEBUG_PATTERNS
+
     fprintf(stderr, "=");
 #endif
     pool = dict->strings;
