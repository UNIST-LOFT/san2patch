diff --git a/src/libjasper/base/jas_image.c b/src/libjasper/base/jas_image.c
index b40ba0c..9401c24 100644
--- a/src/libjasper/base/jas_image.c
+++ b/src/libjasper/base/jas_image.c
@@ -131,7 +131,7 @@ jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
   int clrspc)
 {
 	jas_image_t *image;
-	uint_fast32_t rawsize;
+	size_t rawsize;
 	uint_fast32_t inmem;
 	int cmptno;
 	jas_image_cmptparm_t *cmptparm;
@@ -159,8 +159,39 @@ jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
 	rawsize = 0;
 	for (cmptno = 0, cmptparm = cmptparms; cmptno < numcmpts; ++cmptno,
 	  ++cmptparm) {
-		rawsize += cmptparm->width * cmptparm->height *
-		  (cmptparm->prec + 7) / 8;
+	/* Rationale: Prevent integer overflow when computing per-component
+	   byte counts. Use size_t and explicit overflow checks with the
+	   maximum representable value ((size_t)-1). On error, abort
+	   creation to avoid under-allocation and subsequent OOB writes. */
+		if (cmptparm->width <= 0 || cmptparm->height <= 0) {
+			jas_image_destroy(image);
+			return 0;
+		}
+		{
+			size_t w = (size_t)cmptparm->width;
+			size_t h = (size_t)cmptparm->height;
+			size_t bps = ((size_t)(cmptparm->prec) + 7) / 8;
+			size_t bytes;
+			size_t compbytes;
+			/* Check w * h overflow */
+			if (w > ((size_t)-1) / h) {
+				jas_image_destroy(image);
+				return 0;
+			}
+			bytes = w * h;
+			/* Check bytes * bps overflow */
+			if (bps != 0 && bytes > ((size_t)-1) / bps) {
+				jas_image_destroy(image);
+				return 0;
+			}
+			compbytes = bytes * bps;
+			/* Check rawsize + compbytes overflow */
+			if (rawsize > ((size_t)-1) - compbytes) {
+				jas_image_destroy(image);
+				return 0;
+			}
+			rawsize += compbytes;
+		}
 	}
 	/* Decide whether to buffer the image data in memory, based on the
 	  raw size of the image. */
@@ -186,6 +217,7 @@ jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
 	return image;
 }
 
+
 jas_image_t *jas_image_create0()
 {
 	jas_image_t *image;
