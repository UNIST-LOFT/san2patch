diff --git a/src/libjasper/base/jas_image.c b/src/libjasper/base/jas_image.c
index b40ba0c..a3ac79d 100644
--- a/src/libjasper/base/jas_image.c
+++ b/src/libjasper/base/jas_image.c
@@ -131,11 +131,15 @@ jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
   int clrspc)
 {
 	jas_image_t *image;
-	uint_fast32_t rawsize;
+	size_t rawsize; /* changed from uint_fast32_t to size_t to hold allocation-sized arithmetic */
 	uint_fast32_t inmem;
 	int cmptno;
 	jas_image_cmptparm_t *cmptparm;
 
+	/* Rationale: Perform bounds/overflow checks on parsed dimensions and
+	   compute storage using size_t with explicit overflow checks to avoid
+	   signed integer overflow/wraparound that could lead to OOB access. */
+
 	if (!(image = jas_image_create0())) {
 		return 0;
 	}
@@ -159,8 +163,36 @@ jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
 	rawsize = 0;
 	for (cmptno = 0, cmptparm = cmptparms; cmptno < numcmpts; ++cmptno,
 	  ++cmptparm) {
-		rawsize += cmptparm->width * cmptparm->height *
-		  (cmptparm->prec + 7) / 8;
+// FIXME: Crash CWE-190: Integer Overflow or Wraparound (can lead to CWE-680: Integer Overflow to Buffer Overflow / CWE-787: Out-of-bounds Write)
+		/* Validate parameters are non-negative and perform overflow-safe arithmetic. */
+		if (cmptparm->width <= 0 || cmptparm->height <= 0 || cmptparm->prec < 0) {
+			/* Invalid component parameters. */
+			jas_image_destroy(image);
+			return 0;
+		}
+		{
+			size_t w = (size_t)cmptparm->width;
+			size_t h = (size_t)cmptparm->height;
+			/* Check w * h doesn't overflow size_t */
+			if (w > ((size_t)-1) / h) {
+				jas_image_destroy(image);
+				return 0;
+			}
+			size_t pixels = w * h;
+			size_t bps = (size_t)((cmptparm->prec + 7) / 8);
+			/* Check pixels * bps doesn't overflow size_t */
+			if (bps != 0 && pixels > ((size_t)-1) / bps) {
+				jas_image_destroy(image);
+				return 0;
+			}
+			size_t comp_bytes = pixels * bps;
+			/* Check rawsize + comp_bytes doesn't overflow size_t */
+			if (rawsize > ((size_t)-1) - comp_bytes) {
+				jas_image_destroy(image);
+				return 0;
+			}
+			rawsize += comp_bytes;
+		}
 	}
 	/* Decide whether to buffer the image data in memory, based on the
 	  raw size of the image. */
@@ -186,6 +218,7 @@ jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
 	return image;
 }
 
+
 jas_image_t *jas_image_create0()
 {
 	jas_image_t *image;
