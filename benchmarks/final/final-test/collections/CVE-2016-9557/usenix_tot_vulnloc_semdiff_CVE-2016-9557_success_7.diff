diff --git a/src/libjasper/base/jas_image.c b/src/libjasper/base/jas_image.c
index b40ba0c..721a96c 100644
--- a/src/libjasper/base/jas_image.c
+++ b/src/libjasper/base/jas_image.c
@@ -131,7 +131,7 @@ jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
   int clrspc)
 {
 	jas_image_t *image;
-	uint_fast32_t rawsize;
+	size_t rawsize;
 	uint_fast32_t inmem;
 	int cmptno;
 	jas_image_cmptparm_t *cmptparm;
@@ -159,8 +159,44 @@ jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
 	rawsize = 0;
 	for (cmptno = 0, cmptparm = cmptparms; cmptno < numcmpts; ++cmptno,
 	  ++cmptparm) {
-		rawsize += cmptparm->width * cmptparm->height *
-		  (cmptparm->prec + 7) / 8;
+		/* Rationale: prevent signed/unsigned overflow from component fields
+		   by performing all size computations in size_t/uint64 and checking
+		   for overflow before performing any addition. On failure return 0.
+		*/
+		size_t w = (size_t)cmptparm->width;
+		size_t h = (size_t)cmptparm->height;
+		size_t prec = (size_t)cmptparm->prec;
+
+		/* Basic sanity checks */
+		if (w == 0 || h == 0 || prec == 0) {
+			jas_image_destroy(image);
+			return 0;
+		}
+
+		/* bytes per sample, computed in size_t */
+		size_t bytes_per_sample = (prec + 7) / 8;
+
+		/* Check multiplication w * h does not overflow */
+		if (w > 0 && h > SIZE_MAX / w) {
+			jas_image_destroy(image);
+			return 0;
+		}
+		size_t pixels = w * h;
+
+		/* Check pixels * bytes_per_sample does not overflow */
+		if (bytes_per_sample > 0 && pixels > SIZE_MAX / bytes_per_sample) {
+			jas_image_destroy(image);
+			return 0;
+		}
+		size_t comp_bytes = pixels * bytes_per_sample;
+
+		/* Check rawsize + comp_bytes does not overflow */
+		if (rawsize > SIZE_MAX - comp_bytes) {
+			jas_image_destroy(image);
+			return 0;
+		}
+
+		rawsize += comp_bytes;
 	}
 	/* Decide whether to buffer the image data in memory, based on the
 	  raw size of the image. */
@@ -186,6 +222,7 @@ jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
 	return image;
 }
 
+
 jas_image_t *jas_image_create0()
 {
 	jas_image_t *image;
