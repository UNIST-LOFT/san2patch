diff --git a/src/libjasper/base/jas_image.c b/src/libjasper/base/jas_image.c
index b40ba0c..97a82f8 100644
--- a/src/libjasper/base/jas_image.c
+++ b/src/libjasper/base/jas_image.c
@@ -131,7 +131,7 @@ jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
   int clrspc)
 {
 	jas_image_t *image;
-	uint_fast32_t rawsize;
+	size_t rawsize;
 	uint_fast32_t inmem;
 	int cmptno;
 	jas_image_cmptparm_t *cmptparm;
@@ -144,6 +144,14 @@ jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
 	image->maxcmpts_ = numcmpts;
 	image->inmem_ = true;
 
+	/* Basic sanity bounds for metadata to avoid unreasonable allocations. */
+	/* Rationale: reject absurd numbers of components early to prevent
+	   subsequent arithmetic from overflowing. */
+	if (numcmpts <= 0 || numcmpts > 4096) {
+		jas_image_destroy(image);
+		return 0;
+	}
+
 	/* Allocate memory for the per-component information. */
 	if (!(image->cmpts_ = jas_alloc2(image->maxcmpts_,
 	  sizeof(jas_image_cmpt_t *)))) {
@@ -159,8 +167,37 @@ jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
 	rawsize = 0;
 	for (cmptno = 0, cmptparm = cmptparms; cmptno < numcmpts; ++cmptno,
 	  ++cmptparm) {
-		rawsize += cmptparm->width * cmptparm->height *
-		  (cmptparm->prec + 7) / 8;
+		/* Rationale: Perform overflow-safe arithmetic using size_t and
+		   explicit checks against SIZE_MAX. Also validate per-component
+		   metadata to reasonable bounds. */
+		size_t w = (size_t)cmptparm->width;
+		size_t h = (size_t)cmptparm->height;
+		size_t prec = (size_t)cmptparm->prec;
+		/* conservative per-component bounds */
+		if (w == 0 || h == 0 || prec == 0 || prec > 64) {
+			jas_image_destroy(image);
+			return 0;
+		}
+		/* bytes per sample */
+		size_t b = (prec + 7) / 8;
+		/* Prevent overflow: check w * h */
+		if (w > 0 && h > SIZE_MAX / w) {
+			jas_image_destroy(image);
+			return 0;
+		}
+		size_t wh = w * h;
+		/* Prevent overflow: check wh * b */
+		if (b > 0 && wh > SIZE_MAX / b) {
+			jas_image_destroy(image);
+			return 0;
+		}
+		size_t add = wh * b;
+		/* Prevent overflow when adding to rawsize */
+		if (rawsize > SIZE_MAX - add) {
+			jas_image_destroy(image);
+			return 0;
+		}
+		rawsize += add;
 	}
 	/* Decide whether to buffer the image data in memory, based on the
 	  raw size of the image. */
@@ -186,6 +223,7 @@ jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
 	return image;
 }
 
+
 jas_image_t *jas_image_create0()
 {
 	jas_image_t *image;
