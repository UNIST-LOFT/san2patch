diff --git a/src/libjasper/base/jas_image.c b/src/libjasper/base/jas_image.c
index b40ba0c..30561ef 100644
--- a/src/libjasper/base/jas_image.c
+++ b/src/libjasper/base/jas_image.c
@@ -131,11 +131,18 @@ jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
   int clrspc)
 {
 	jas_image_t *image;
-	uint_fast32_t rawsize;
+	size_t rawsize;
 	uint_fast32_t inmem;
 	int cmptno;
 	jas_image_cmptparm_t *cmptparm;
 
+	/* Rationale: Prevent integer overflow when computing the aggregate raw
+	   buffer size. Promote intermediate values to size_t and check for
+	   multiplication/addition overflow against SIZE_MAX before using the
+	   result for allocation/indexing. Abort creation on invalid/overflowed
+	   values to avoid out-of-bounds writes (CWE-787).
+	*/
+
 	if (!(image = jas_image_create0())) {
 		return 0;
 	}
@@ -159,8 +166,36 @@ jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
 	rawsize = 0;
 	for (cmptno = 0, cmptparm = cmptparms; cmptno < numcmpts; ++cmptno,
 	  ++cmptparm) {
-		rawsize += cmptparm->width * cmptparm->height *
-		  (cmptparm->prec + 7) / 8;
+// FIXME: Crash CWE-787: Out-of-bounds Write
+ 		/* Check dimensions and precision and perform overflow-checked
+ 		   arithmetic using size_t. */
+ 		size_t w = (size_t)cmptparm->width;
+ 		size_t h = (size_t)cmptparm->height;
+ 		if (w == 0 || h == 0) {
+ 			jas_image_destroy(image);
+ 			return 0;
+ 		}
+ 		size_t prec = (size_t)cmptparm->prec;
+ 		/* bytes per sample */
+ 		size_t bps = (prec + 7) / 8;
+ 		/* Check multiplication w * h */
+ 		if (w > (SIZE_MAX / h)) {
+ 			jas_image_destroy(image);
+ 			return 0;
+ 		}
+ 		size_t pixels = w * h;
+ 		/* Check pixels * bps */
+ 		if (bps > (SIZE_MAX / pixels)) {
+ 			jas_image_destroy(image);
+ 			return 0;
+ 		}
+ 		size_t comp_bytes = pixels * bps;
+ 		/* Check rawsize + comp_bytes overflow */
+ 		if (rawsize > (SIZE_MAX - comp_bytes)) {
+ 			jas_image_destroy(image);
+ 			return 0;
+ 		}
+ 		rawsize += comp_bytes;
 	}
 	/* Decide whether to buffer the image data in memory, based on the
 	  raw size of the image. */
@@ -186,6 +221,7 @@ jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
 	return image;
 }
 
+
 jas_image_t *jas_image_create0()
 {
 	jas_image_t *image;
