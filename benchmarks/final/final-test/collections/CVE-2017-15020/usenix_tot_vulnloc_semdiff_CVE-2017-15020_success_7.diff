diff --git a/bfd/dwarf1.c b/bfd/dwarf1.c
index 37d0e820065..f7443fbb9cd 100644
--- a/bfd/dwarf1.c
+++ b/bfd/dwarf1.c
@@ -218,11 +218,19 @@ parse_die (bfd *             abfd,
 
       switch (FORM_FROM_ATTR (attr))
 	{
+	/* Rationale: Add explicit bounds checks before every read that depends on
+	   data inside the DIE buffer. On detection of truncated data, return FALSE
+	   to abort parsing. Use memchr to locate NUL-terminated strings within the
+	   remaining buffer. */
 	case FORM_DATA2:
+	  if (xptr + 2 > aDiePtrEnd)
+	    return FALSE;
 	  xptr += 2;
 	  break;
 	case FORM_DATA4:
 	case FORM_REF:
+	  if (xptr + 4 > aDiePtrEnd)
+	    return FALSE;
 	  if (attr == AT_sibling)
 	    aDieInfo->sibling = bfd_get_32 (abfd, (bfd_byte *) xptr);
 	  else if (attr == AT_stmt_list)
@@ -233,9 +241,13 @@ parse_die (bfd *             abfd,
 	  xptr += 4;
 	  break;
 	case FORM_DATA8:
+	  if (xptr + 8 > aDiePtrEnd)
+	    return FALSE;
 	  xptr += 8;
 	  break;
 	case FORM_ADDR:
+	  if (xptr + 4 > aDiePtrEnd)
+	    return FALSE;
 	  if (attr == AT_low_pc)
 	    aDieInfo->low_pc = bfd_get_32 (abfd, (bfd_byte *) xptr);
 	  else if (attr == AT_high_pc)
@@ -243,17 +255,40 @@ parse_die (bfd *             abfd,
 	  xptr += 4;
 	  break;
 	case FORM_BLOCK2:
+	  if (xptr + 2 > aDiePtrEnd)
+	    return FALSE;
+	  {
+	    unsigned int len = bfd_get_16 (abfd, (bfd_byte *) xptr);
+	    if (len > (unsigned int) (aDiePtrEnd - (xptr + 2)))
+	      return FALSE;
+	  }
 	  xptr += 2 + bfd_get_16 (abfd, (bfd_byte *) xptr);
 	  break;
 	case FORM_BLOCK4:
+	  if (xptr + 4 > aDiePtrEnd)
+	    return FALSE;
+	  {
+	    unsigned int len = bfd_get_32 (abfd, (bfd_byte *) xptr);
+	    if (len > (unsigned int) (aDiePtrEnd - (xptr + 4)))
+	      return FALSE;
+	  }
 	  xptr += 4 + bfd_get_32 (abfd, (bfd_byte *) xptr);
 	  break;
 	case FORM_STRING:
-	  if (attr == AT_name)
-	    aDieInfo->name = (char *) xptr;
-	  xptr += strlen ((char *) xptr) + 1;
+	  if (xptr >= aDiePtrEnd)
+	    return FALSE;
+	  {
+	    size_t rem = (size_t) (aDiePtrEnd - xptr);
+	    void *nul = memchr ((char *) xptr, '\0', rem);
+	    if (nul == NULL)
+	      return FALSE;
+	    if (attr == AT_name)
+	      aDieInfo->name = (char *) xptr;
+	    xptr = (bfd_byte *) nul + 1;
+	  }
 	  break;
 	}
+
     }
 
   return TRUE;
