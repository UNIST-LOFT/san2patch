diff --git a/bfd/dwarf1.c b/bfd/dwarf1.c
index 37d0e820065..4ea95e62592 100644
--- a/bfd/dwarf1.c
+++ b/bfd/dwarf1.c
@@ -218,11 +218,23 @@ parse_die (bfd *             abfd,
 
       switch (FORM_FROM_ATTR (attr))
 	{
+	/* Rationale: Validate all reads derived from DWARF form data against the
+	   provided DIE buffer bounds (aDiePtr .. aDiePtrEnd). For each case we
+	   ensure the required number of bytes are present before calling
+	   bfd_get_* or performing pointer arithmetic. On malformed/truncated
+	   input, return FALSE to fail gracefully instead of reading out of
+	   bounds. */
+	if (xptr >= aDiePtrEnd)
+	  return FALSE;
 	case FORM_DATA2:
+	  if ((size_t)(aDiePtrEnd - xptr) < 2)
+	    return FALSE;
 	  xptr += 2;
 	  break;
 	case FORM_DATA4:
 	case FORM_REF:
+	  if ((size_t)(aDiePtrEnd - xptr) < 4)
+	    return FALSE;
 	  if (attr == AT_sibling)
 	    aDieInfo->sibling = bfd_get_32 (abfd, (bfd_byte *) xptr);
 	  else if (attr == AT_stmt_list)
@@ -233,9 +245,13 @@ parse_die (bfd *             abfd,
 	  xptr += 4;
 	  break;
 	case FORM_DATA8:
+	  if ((size_t)(aDiePtrEnd - xptr) < 8)
+	    return FALSE;
 	  xptr += 8;
 	  break;
 	case FORM_ADDR:
+	  if ((size_t)(aDiePtrEnd - xptr) < 4)
+	    return FALSE;
 	  if (attr == AT_low_pc)
 	    aDieInfo->low_pc = bfd_get_32 (abfd, (bfd_byte *) xptr);
 	  else if (attr == AT_high_pc)
@@ -243,17 +259,41 @@ parse_die (bfd *             abfd,
 	  xptr += 4;
 	  break;
 	case FORM_BLOCK2:
-	  xptr += 2 + bfd_get_16 (abfd, (bfd_byte *) xptr);
+	  /* Need 2 bytes for the length field first. */
+	  if ((size_t)(aDiePtrEnd - xptr) < 2)
+	    return FALSE;
+	  {
+	    unsigned int len = bfd_get_16 (abfd, (bfd_byte *) xptr);
+	    if ((size_t)(aDiePtrEnd - xptr - 2) < len)
+	      return FALSE;
+	    xptr += 2 + len;
+	  }
 	  break;
 	case FORM_BLOCK4:
-	  xptr += 4 + bfd_get_32 (abfd, (bfd_byte *) xptr);
+	  /* Need 4 bytes for the length field first. */
+	  if ((size_t)(aDiePtrEnd - xptr) < 4)
+	    return FALSE;
+	  {
+	    unsigned int len = bfd_get_32 (abfd, (bfd_byte *) xptr);
+	    if ((size_t)(aDiePtrEnd - xptr - 4) < len)
+	      return FALSE;
+	    xptr += 4 + len;
+	  }
 	  break;
 	case FORM_STRING:
-	  if (attr == AT_name)
-	    aDieInfo->name = (char *) xptr;
-	  xptr += strlen ((char *) xptr) + 1;
+	  /* Ensure a NUL terminator exists within bounds. */
+	  {
+	    size_t rem = (size_t)(aDiePtrEnd - xptr);
+	    void *nul = memchr (xptr, '\0', rem);
+	    if (nul == NULL)
+	      return FALSE;
+	    if (attr == AT_name)
+	      aDieInfo->name = (char *) xptr;
+	    xptr = (bfd_byte *) ((char *) nul + 1);
+	  }
 	  break;
 	}
+
     }
 
   return TRUE;
