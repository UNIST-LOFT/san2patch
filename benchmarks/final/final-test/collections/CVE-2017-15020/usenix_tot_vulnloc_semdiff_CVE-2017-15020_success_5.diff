diff --git a/bfd/dwarf1.c b/bfd/dwarf1.c
index 37d0e820065..62e678c1073 100644
--- a/bfd/dwarf1.c
+++ b/bfd/dwarf1.c
@@ -218,11 +218,17 @@ parse_die (bfd *             abfd,
 
       switch (FORM_FROM_ATTR (attr))
 	{
+	/* Rationale: Validate remaining bytes before performing multi-byte reads or advances
+	   to prevent heap-buffer-overflow when parsing malformed/truncated DWARF data. */
 	case FORM_DATA2:
+	  if (aDiePtrEnd - xptr < 2)
+	    return FALSE;
 	  xptr += 2;
 	  break;
 	case FORM_DATA4:
 	case FORM_REF:
+	  if (aDiePtrEnd - xptr < 4)
+	    return FALSE;
 	  if (attr == AT_sibling)
 	    aDieInfo->sibling = bfd_get_32 (abfd, (bfd_byte *) xptr);
 	  else if (attr == AT_stmt_list)
@@ -233,9 +239,13 @@ parse_die (bfd *             abfd,
 	  xptr += 4;
 	  break;
 	case FORM_DATA8:
+	  if (aDiePtrEnd - xptr < 8)
+	    return FALSE;
 	  xptr += 8;
 	  break;
 	case FORM_ADDR:
+	  if (aDiePtrEnd - xptr < 4)
+	    return FALSE;
 	  if (attr == AT_low_pc)
 	    aDieInfo->low_pc = bfd_get_32 (abfd, (bfd_byte *) xptr);
 	  else if (attr == AT_high_pc)
@@ -243,17 +253,41 @@ parse_die (bfd *             abfd,
 	  xptr += 4;
 	  break;
 	case FORM_BLOCK2:
-	  xptr += 2 + bfd_get_16 (abfd, (bfd_byte *) xptr);
+	  if (aDiePtrEnd - xptr < 2)
+	    return FALSE;
+	  {
+	    unsigned int len = bfd_get_16 (abfd, (bfd_byte *) xptr);
+	    if ((size_t)(aDiePtrEnd - xptr) < (size_t)(2 + len))
+	      return FALSE;
+	    xptr += 2 + len;
+	  }
 	  break;
 	case FORM_BLOCK4:
-	  xptr += 4 + bfd_get_32 (abfd, (bfd_byte *) xptr);
+	  if (aDiePtrEnd - xptr < 4)
+	    return FALSE;
+	  {
+	    unsigned int len = bfd_get_32 (abfd, (bfd_byte *) xptr);
+	    if ((size_t)(aDiePtrEnd - xptr) < (size_t)(4 + len))
+	      return FALSE;
+	    xptr += 4 + len;
+	  }
 	  break;
 	case FORM_STRING:
-	  if (attr == AT_name)
-	    aDieInfo->name = (char *) xptr;
-	  xptr += strlen ((char *) xptr) + 1;
+	  {
+	    ptrdiff_t remaining = aDiePtrEnd - xptr;
+	    if (remaining <= 0)
+	      return FALSE;
+	    /* Ensure NUL terminator exists within bounds. */
+	    char *end = (char *) memchr ((char *) xptr, '\0', (size_t) remaining);
+	    if (end == NULL)
+	      return FALSE;
+	    if (attr == AT_name)
+	      aDieInfo->name = (char *) xptr;
+	    xptr = (bfd_byte *) (end + 1);
+	  }
 	  break;
 	}
+
     }
 
   return TRUE;
