diff --git a/bfd/dwarf1.c b/bfd/dwarf1.c
index 37d0e820065..ac350790794 100644
--- a/bfd/dwarf1.c
+++ b/bfd/dwarf1.c
@@ -217,43 +217,103 @@ parse_die (bfd *             abfd,
       xptr += 2;
 
       switch (FORM_FROM_ATTR (attr))
-	{
-	case FORM_DATA2:
-	  xptr += 2;
-	  break;
-	case FORM_DATA4:
-	case FORM_REF:
-	  if (attr == AT_sibling)
-	    aDieInfo->sibling = bfd_get_32 (abfd, (bfd_byte *) xptr);
-	  else if (attr == AT_stmt_list)
-	    {
-	      aDieInfo->stmt_list_offset = bfd_get_32 (abfd, (bfd_byte *) xptr);
-	      aDieInfo->has_stmt_list = 1;
-	    }
-	  xptr += 4;
-	  break;
-	case FORM_DATA8:
-	  xptr += 8;
-	  break;
-	case FORM_ADDR:
-	  if (attr == AT_low_pc)
-	    aDieInfo->low_pc = bfd_get_32 (abfd, (bfd_byte *) xptr);
-	  else if (attr == AT_high_pc)
-	    aDieInfo->high_pc = bfd_get_32 (abfd, (bfd_byte *) xptr);
-	  xptr += 4;
-	  break;
-	case FORM_BLOCK2:
-	  xptr += 2 + bfd_get_16 (abfd, (bfd_byte *) xptr);
-	  break;
-	case FORM_BLOCK4:
-	  xptr += 4 + bfd_get_32 (abfd, (bfd_byte *) xptr);
-	  break;
-	case FORM_STRING:
-	  if (attr == AT_name)
-	    aDieInfo->name = (char *) xptr;
-	  xptr += strlen ((char *) xptr) + 1;
-	  break;
-	}
+{
+/* Rationale: Added explicit bounds checks before every read/advance to avoid out-of-bounds
+   reads when parsing malformed or truncated DWARF data. On failure we return FALSE to
+   fail gracefully and avoid any undefined behaviour or crashes. */
+case FORM_DATA2:
+  if (xptr > aDiePtrEnd)
+    return FALSE;
+  {
+    size_t rem = (size_t)(aDiePtrEnd - xptr);
+    if (rem < 2)
+      return FALSE;
+  }
+  xptr += 2;
+  break;
+case FORM_DATA4:
+case FORM_REF:
+  if (xptr > aDiePtrEnd)
+    return FALSE;
+  {
+    size_t rem = (size_t)(aDiePtrEnd - xptr);
+    if (rem < 4)
+      return FALSE;
+    if (attr == AT_sibling)
+      aDieInfo->sibling = bfd_get_32 (abfd, (bfd_byte *) xptr);
+    else if (attr == AT_stmt_list)
+      {
+        aDieInfo->stmt_list_offset = bfd_get_32 (abfd, (bfd_byte *) xptr);
+        aDieInfo->has_stmt_list = 1;
+      }
+  }
+  xptr += 4;
+  break;
+case FORM_DATA8:
+  if (xptr > aDiePtrEnd)
+    return FALSE;
+  {
+    size_t rem = (size_t)(aDiePtrEnd - xptr);
+    if (rem < 8)
+      return FALSE;
+  }
+  xptr += 8;
+  break;
+case FORM_ADDR:
+  if (xptr > aDiePtrEnd)
+    return FALSE;
+  {
+    size_t rem = (size_t)(aDiePtrEnd - xptr);
+    if (rem < 4)
+      return FALSE;
+    if (attr == AT_low_pc)
+      aDieInfo->low_pc = bfd_get_32 (abfd, (bfd_byte *) xptr);
+    else if (attr == AT_high_pc)
+      aDieInfo->high_pc = bfd_get_32 (abfd, (bfd_byte *) xptr);
+  }
+  xptr += 4;
+  break;
+case FORM_BLOCK2:
+  if (xptr > aDiePtrEnd)
+    return FALSE;
+  {
+    size_t rem = (size_t)(aDiePtrEnd - xptr);
+    if (rem < 2)
+      return FALSE;
+    u_int32_t blen = bfd_get_16 (abfd, (bfd_byte *) xptr);
+    if ((size_t) blen > rem - 2)
+      return FALSE;
+    xptr += 2 + blen;
+  }
+  break;
+case FORM_BLOCK4:
+  if (xptr > aDiePtrEnd)
+    return FALSE;
+  {
+    size_t rem = (size_t)(aDiePtrEnd - xptr);
+    if (rem < 4)
+      return FALSE;
+    u_int32_t blen = bfd_get_32 (abfd, (bfd_byte *) xptr);
+    if ((size_t) blen > rem - 4)
+      return FALSE;
+    xptr += 4 + blen;
+  }
+  break;
+case FORM_STRING:
+  if (xptr > aDiePtrEnd)
+    return FALSE;
+  {
+    size_t rem = (size_t)(aDiePtrEnd - xptr);
+    const void *nul = memchr (xptr, '\0', rem);
+    if (nul == NULL)
+      return FALSE;
+    if (attr == AT_name)
+      aDieInfo->name = (char *) xptr;
+    xptr = (bfd_byte *) nul + 1;
+  }
+  break;
+}
+
     }
 
   return TRUE;
