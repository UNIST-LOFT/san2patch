diff --git a/bfd/dwarf1.c b/bfd/dwarf1.c
index 37d0e820065..819540de08d 100644
--- a/bfd/dwarf1.c
+++ b/bfd/dwarf1.c
@@ -218,42 +218,90 @@ parse_die (bfd *             abfd,
 
       switch (FORM_FROM_ATTR (attr))
 	{
+	/* Rationale: Validate buffer bounds before any read/consume operation to avoid
+	   out-of-bounds reads reported by ASan. For each case that consumes bytes
+	   from the DIE buffer, ensure there are enough remaining bytes in the
+	   [aDiePtr, aDiePtrEnd) range. Return FALSE on malformed/truncated data. */
 	case FORM_DATA2:
-	  xptr += 2;
+	  {
+	    size_t remaining = (size_t) (aDiePtrEnd - xptr);
+	    if (remaining < 2)
+	      return FALSE;
+	    xptr += 2;
+	  }
 	  break;
 	case FORM_DATA4:
 	case FORM_REF:
-	  if (attr == AT_sibling)
-	    aDieInfo->sibling = bfd_get_32 (abfd, (bfd_byte *) xptr);
-	  else if (attr == AT_stmt_list)
-	    {
-	      aDieInfo->stmt_list_offset = bfd_get_32 (abfd, (bfd_byte *) xptr);
-	      aDieInfo->has_stmt_list = 1;
-	    }
-	  xptr += 4;
+	  {
+	    size_t remaining = (size_t) (aDiePtrEnd - xptr);
+	    if (remaining < 4)
+	      return FALSE;
+	    if (attr == AT_sibling)
+	      aDieInfo->sibling = bfd_get_32 (abfd, (bfd_byte *) xptr);
+	    else if (attr == AT_stmt_list)
+	      {
+		aDieInfo->stmt_list_offset = bfd_get_32 (abfd, (bfd_byte *) xptr);
+		aDieInfo->has_stmt_list = 1;
+	      }
+	    xptr += 4;
+	  }
 	  break;
 	case FORM_DATA8:
-	  xptr += 8;
+	  {
+	    size_t remaining = (size_t) (aDiePtrEnd - xptr);
+	    if (remaining < 8)
+	      return FALSE;
+	    xptr += 8;
+	  }
 	  break;
 	case FORM_ADDR:
-	  if (attr == AT_low_pc)
-	    aDieInfo->low_pc = bfd_get_32 (abfd, (bfd_byte *) xptr);
-	  else if (attr == AT_high_pc)
-	    aDieInfo->high_pc = bfd_get_32 (abfd, (bfd_byte *) xptr);
-	  xptr += 4;
+	  {
+	    size_t remaining = (size_t) (aDiePtrEnd - xptr);
+	    if (remaining < 4)
+	      return FALSE;
+	    if (attr == AT_low_pc)
+	      aDieInfo->low_pc = bfd_get_32 (abfd, (bfd_byte *) xptr);
+	    else if (attr == AT_high_pc)
+	      aDieInfo->high_pc = bfd_get_32 (abfd, (bfd_byte *) xptr);
+	    xptr += 4;
+	  }
 	  break;
 	case FORM_BLOCK2:
-	  xptr += 2 + bfd_get_16 (abfd, (bfd_byte *) xptr);
+	  {
+	    size_t remaining = (size_t) (aDiePtrEnd - xptr);
+	    if (remaining < 2)
+	      return FALSE;
+	    size_t len = (size_t) bfd_get_16 (abfd, (bfd_byte *) xptr);
+	    if (len > remaining - 2)
+	      return FALSE;
+	    xptr += 2 + len;
+	  }
 	  break;
 	case FORM_BLOCK4:
-	  xptr += 4 + bfd_get_32 (abfd, (bfd_byte *) xptr);
+	  {
+	    size_t remaining = (size_t) (aDiePtrEnd - xptr);
+	    if (remaining < 4)
+	      return FALSE;
+	    size_t len = (size_t) bfd_get_32 (abfd, (bfd_byte *) xptr);
+	    if (len > remaining - 4)
+	      return FALSE;
+	    xptr += 4 + len;
+	  }
 	  break;
 	case FORM_STRING:
 	  if (attr == AT_name)
 	    aDieInfo->name = (char *) xptr;
-	  xptr += strlen ((char *) xptr) + 1;
+	  {
+	    size_t remaining = (size_t) (aDiePtrEnd - xptr);
+	    /* Ensure the string is NUL-terminated inside the buffer */
+	    bfd_byte *term = memchr (xptr, '\0', remaining);
+	    if (term == NULL)
+	      return FALSE;
+	    xptr += (term - xptr) + 1;
+	  }
 	  break;
 	}
+
     }
 
   return TRUE;
