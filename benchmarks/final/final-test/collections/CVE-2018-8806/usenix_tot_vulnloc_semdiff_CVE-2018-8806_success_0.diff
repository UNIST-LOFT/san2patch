diff --git a/util/decompile.c b/util/decompile.c
index c844fa49..988ef360 100644
--- a/util/decompile.c
+++ b/util/decompile.c
@@ -3390,19 +3390,39 @@ decompileAction(int n, SWF_ACTION *actions, int maxn)
 }
 
 static void
-decompileActions(int n, SWF_ACTION *actions, int indent)
+// FIXME: Crash CWE-416: Use After Free
+ decompileActions(int n, SWF_ACTION *actions, int indent)
 {
 	int i, svindent;
 
 	svindent = gIndent;
 	gIndent = indent;
 	
+	/* Per-iteration defensive checks: ensure actions pointer is valid and
+	   decompileAction return value is sane to avoid walking past the array
+	   or using stale indexes after parser-side realloc/free. */
 	for(i=0;i<n;i++) {
-		i+=decompileAction(i, actions, n);
+		if (actions == NULL) /* defensive: avoid dereferencing NULL/stale pointer */
+			break;
+
+		int delta = decompileAction(i, actions, n);
+		/* If decompileAction reports an error or would move the index out of
+		   bounds, stop further processing to avoid using potentially freed
+		   or invalid memory. */
+		if (delta <= 0) {
+			/* delta == 0 means no progress; delta < 0 treat as error */
+			break;
+		}
+		if (delta > n - i) {
+			/* would advance beyond array bounds, abort to avoid UAF */
+			break;
+		}
+		i += delta;
 	}
 	gIndent = svindent;
 }
 
+
 char *
 decompile5Action(int n, SWF_ACTION *actions,int indent)
 {
diff --git a/util/parser.c b/util/parser.c
index 6a70bb0c..cab1218c 100644
--- a/util/parser.c
+++ b/util/parser.c
@@ -966,16 +966,35 @@ parseSWF_ACTIONRECORD(FILE * f, int *thisactionp, SWF_ACTION *actions)
 		int end;
 		struct SWF_ACTIONPUSHPARAM *param;
 		ACT_BEGIN(SWF_ACTIONPUSH)
-
+// FIXME: Crash CWE-416: Use After Free
+ 
 		end = fileOffset + act->Length;
-  		act->Params = (struct SWF_ACTIONPUSHPARAM *) calloc (1, sizeof (struct SWF_ACTIONPUSHPARAM));
-  		act->NumParam = 0;
-  		while ( fileOffset < end ) {
+ 		act->Params = (struct SWF_ACTIONPUSHPARAM *) calloc (1, sizeof (struct SWF_ACTIONPUSHPARAM));
+ 		act->NumParam = 0;
+ 		while ( fileOffset < end ) {
 			param = &(act->Params[act->NumParam++]);
 			param->Type = readUInt8(f);
 			switch( param->Type ) {
 			case 0: /* STRING */
-				param->p.String = readString(f);
+				/* Rationale: perform a manual deep copy of the string so the decompiler
+				   never holds a direct pointer into parser-owned/resizable buffers. */
+				{
+					char *s = readString(f);
+					if (s) {
+						size_t len = 0;
+						while (s[len]) len++;
+						len++; /* include terminating null */
+						param->p.String = (char *) malloc(len);
+						if (param->p.String) {
+							size_t i;
+							for (i = 0; i < len; i++) param->p.String[i] = s[i];
+						} else {
+							param->p.String = NULL;
+						}
+					} else {
+						param->p.String = NULL;
+					}
+				}
 				break;
 			case 1: /* FLOAT */
 				param->p.Float = readFloat(f);
@@ -1008,9 +1027,10 @@ parseSWF_ACTIONRECORD(FILE * f, int *thisactionp, SWF_ACTION *actions)
       			act->Params = (struct SWF_ACTIONPUSHPARAM *) realloc (act->Params,
 							 (act->NumParam + 1) *
 							 sizeof (struct SWF_ACTIONPUSHPARAM));
-    		}
+			}
 		break;
 		}
+
 	case SWFACTION_LOGICALNOT:
 		{
 		ACT_BEGIN_NOLEN(SWF_ACTIONNOT)
