diff --git a/tools/tiff2ps.c b/tools/tiff2ps.c
index ae296e91..d0412794 100644
--- a/tools/tiff2ps.c
+++ b/tools/tiff2ps.c
@@ -2436,7 +2436,12 @@ PSDataColorContig(FILE* fd, TIFF* tif, uint32 w, uint32 h, int nc)
 	uint32 row;
 	int breaklen = MAXLINE, es = samplesperpixel - nc;
 	tsize_t cc;
-	unsigned char *tf_buf;
+// Rationale: Add explicit validation of tf_bytesperrow and a per-iteration
+// bounds check to prevent reading past the allocated tf_buf. This is a
+// minimal change that avoids out-of-bounds reads by ensuring each loop
+// iteration has enough bytes remaining for the expected channel accesses.
+// FIXME: Crash CWE-125: Out-of-bounds Read
+ 	unsigned char *tf_buf;
 	unsigned char *cp, c;
 
 	(void) w;
@@ -2445,6 +2450,12 @@ PSDataColorContig(FILE* fd, TIFF* tif, uint32 w, uint32 h, int nc)
 		TIFFError(filename, "No space for scanline buffer");
 		return;
 	}
+	/* Defensive: zero-length scanline can't be processed safely */
+	if (tf_bytesperrow == 0) {
+		TIFFError(filename, "Empty scanline");
+		_TIFFfree((char *) tf_buf);
+		return;
+	}
 	for (row = 0; row < h; row++) {
 		if (TIFFReadScanline(tif, tf_buf, row, 0) < 0)
 			break;
@@ -2460,6 +2471,13 @@ PSDataColorContig(FILE* fd, TIFF* tif, uint32 w, uint32 h, int nc)
 			int adjust;
 			cc = 0;
 			for (; cc < tf_bytesperrow; cc += samplesperpixel) {
+				/* Prevent reading beyond buffer: ensure enough bytes remain
+				   for the channel accesses (we read up to 'nc' bytes plus
+				   potentially the alpha byte at cp[nc]). */
+				if ((tsize_t)cc + (tsize_t)nc >= (tsize_t)tf_bytesperrow) {
+					/* Not enough data for this pixel -- stop processing row */
+					break;
+				}
 				DOBREAK(breaklen, nc, fd);
 				/*
 				 * For images with alpha, matte against
@@ -2479,6 +2497,10 @@ PSDataColorContig(FILE* fd, TIFF* tif, uint32 w, uint32 h, int nc)
 		} else {
 			cc = 0;
 			for (; cc < tf_bytesperrow; cc += samplesperpixel) {
+				/* Ensure we have enough bytes to read nc samples */
+				if ((tsize_t)cc + (tsize_t)nc > (tsize_t)tf_bytesperrow) {
+					break;
+				}
 				DOBREAK(breaklen, nc, fd);
 				switch (nc) {
 				case 4: c = *cp++; PUTHEX(c,fd);
@@ -2493,6 +2515,7 @@ PSDataColorContig(FILE* fd, TIFF* tif, uint32 w, uint32 h, int nc)
 	_TIFFfree((char *) tf_buf);
 }
 
+
 void
 PSDataColorSeparate(FILE* fd, TIFF* tif, uint32 w, uint32 h, int nc)
 {
