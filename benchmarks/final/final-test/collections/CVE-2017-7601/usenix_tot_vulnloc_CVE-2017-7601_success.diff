diff --git a/libtiff/tif_jpeg.c b/libtiff/tif_jpeg.c
index 6c17c388..1c7f3497 100644
--- a/libtiff/tif_jpeg.c
+++ b/libtiff/tif_jpeg.c
@@ -1566,7 +1566,7 @@ prepare_JPEGTables(TIFF* tif)
 	/* Direct libjpeg output into jpegtables */
 	if (!TIFFjpeg_tables_dest(sp, tif))
 		return (0);
-	/* Emit tables-only datastream */
+/* Emit tables-only datastream */
 	if (!TIFFjpeg_write_tables(sp))
 		return (0);
 
@@ -1574,7 +1574,8 @@ prepare_JPEGTables(TIFF* tif)
 }
 
 static int
-JPEGSetupEncode(TIFF* tif)
+// FIXME: Crash CWE-190: Integer Overflow or Wraparound
+ JPEGSetupEncode(TIFF* tif)
 {
 	JPEGState* sp = JState(tif);
 	TIFFDirectory *td = &tif->tif_dir;
@@ -1585,8 +1586,43 @@ JPEGSetupEncode(TIFF* tif)
             return TIFFReInitJPEG_12( tif, COMPRESSION_JPEG, 1 );
 #endif
 
-        JPEGInitializeLibJPEG( tif, FALSE );
+        /* Rationale: Validate numeric parameters that contribute to shift/exponent
+         * calculations to prevent integer overflow and out-of-range shifts (CWE-190).
+         * Reject inputs where multiplication would overflow or where the derived
+         * shift count would be >= sizeof(long)*8, which would be undefined.
+         */
+	{
+		size_t size_max = (size_t)-1;
+		unsigned long bits_per_sample = (unsigned long)td->td_bitspersample;
+		unsigned long samples_per_pixel = (unsigned long)td->td_samplesperpixel;
+		unsigned long bits_per_pixel;
+
+		if (bits_per_sample == 0 || samples_per_pixel == 0) {
+			TIFFErrorExt(tif->tif_clientdata, module,
+				 "Invalid image parameters: bits/sample or samples/pixel is zero");
+			return (0);
+		}
 
+		/* Check multiplication overflow: bits_per_sample * samples_per_pixel */
+		if (bits_per_sample > 0 && samples_per_pixel > size_max / bits_per_sample) {
+			TIFFErrorExt(tif->tif_clientdata, module,
+				 "Overflow computing bits per pixel");
+			return (0);
+		}
+
+		bits_per_pixel = bits_per_sample * samples_per_pixel;
+
+		/* Ensure shift count derived from bits_per_pixel is within valid range
+		 * for shifting a 'long' value.
+		 */
+		if (bits_per_pixel >= (unsigned long)(sizeof(long) * 8)) {
+			TIFFErrorExt(tif->tif_clientdata, module,
+				 "Computed shift exponent %lu too large", bits_per_pixel);
+			return (0);
+		}
+	}
+
+        JPEGInitializeLibJPEG( tif, FALSE );
 	assert(sp != NULL);
 	assert(!sp->cinfo.comm.is_decompressor);
 
