diff --git a/libtiff/tif_jpeg.c b/libtiff/tif_jpeg.c
index 6c17c388..d172188a 100644
--- a/libtiff/tif_jpeg.c
+++ b/libtiff/tif_jpeg.c
@@ -1643,23 +1643,39 @@ JPEGSetupEncode(TIFF* tif)
 			if (!TIFFGetField(tif, TIFFTAG_REFERENCEBLACKWHITE,
 					  &ref)) {
 				float refbw[6];
-				long top = 1L << td->td_bitspersample;
+				/*
+				 * Rationale: Prevent undefined behaviour from shifting by a
+				 * count greater than or equal to the width of unsigned long.
+				 * Validate td->td_bitspersample before using it as a shift
+				 * count. If invalid, report an error and fail setup to avoid
+				 * downstream crashes or memory corruption.
+				 */
+				int bits = td->td_bitspersample;
+				int max_bits = (int)(sizeof(unsigned long) * 8);
+				if (bits <= 0 || bits >= max_bits) {
+					TIFFErrorExt(tif->tif_clientdata, module,
+					  "Invalid BitsPerSample %d (must be 1..%d) for ReferenceBlackWhite",
+					  bits, max_bits - 1);
+					return (0);
+				}
+				unsigned long top = 1UL << bits;
 				refbw[0] = 0;
-				refbw[1] = (float)(top-1L);
-				refbw[2] = (float)(top>>1);
+				refbw[1] = (float)(top - 1UL);
+				refbw[2] = (float)(top >> 1);
 				refbw[3] = refbw[1];
 				refbw[4] = refbw[2];
 				refbw[5] = refbw[1];
 				TIFFSetField(tif, TIFFTAG_REFERENCEBLACKWHITE,
-					     refbw);
+					 refbw);
 			}
 		}
 		break;
 	case PHOTOMETRIC_PALETTE:		/* disallowed by Tech Note */
 	case PHOTOMETRIC_MASK:
 		TIFFErrorExt(tif->tif_clientdata, module,
-			  "PhotometricInterpretation %d not allowed for JPEG",
-			  (int) sp->photometric);
+		  "PhotometricInterpretation %d not allowed for JPEG",
+// FIXME: Crash CWE-190: Integer Overflow or Wraparound
+  		  (int) sp->photometric);
 		return (0);
 	default:
 		/* TIFF 6.0 forbids subsampling of all other color spaces */
@@ -1683,7 +1699,7 @@ JPEGSetupEncode(TIFF* tif)
 #endif
 	{
 		TIFFErrorExt(tif->tif_clientdata, module, "BitsPerSample %d not allowed for JPEG",
-			  (int) td->td_bitspersample);
+		  (int) td->td_bitspersample);
 		return (0);
 	}
 	sp->cinfo.c.data_precision = td->td_bitspersample;
@@ -1692,6 +1708,7 @@ JPEGSetupEncode(TIFF* tif)
 #endif
 	if (isTiled(tif)) {
 		if ((td->td_tilelength % (sp->v_sampling * DCTSIZE)) != 0) {
+
 			TIFFErrorExt(tif->tif_clientdata, module,
 				  "JPEG tile height must be multiple of %d",
 				  sp->v_sampling * DCTSIZE);
