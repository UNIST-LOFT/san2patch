diff --git a/gnulib b/gnulib
--- a/gnulib
+++ b/gnulib
@@ -1 +1 @@
-Subproject commit 6b26660a01125acb394e39ac71635c8df4c110c4
+Subproject commit 6b26660a01125acb394e39ac71635c8df4c110c4-dirty
diff --git a/src/split.c b/src/split.c
index f9c99db43..56be99caa 100644
--- a/src/split.c
+++ b/src/split.c
@@ -980,12 +980,23 @@ bytes_chunk_extract (uintmax_t k, uintmax_t n, char *buf, size_t bufsize,
   assert (k && n && k <= n && n <= file_size);
 
   start = (k - 1) * (file_size / n);
-  end = (k == n) ? file_size : k * (file_size / n);
-
-  if (initial_read != SIZE_MAX || start < initial_read)
+// FIXME: Crash CWE-787: Out-of-bounds Write
+   end = (k == n) ? file_size : k * (file_size / n);
+
+  /* Rationale: Fix integer-wrap and signed/unsigned mix by requiring both
+     that initial_read is valid and that start is a non-negative value
+     strictly less than initial_read. Compute the difference in a signed
+     type, validate it is positive, then cast to size_t and ensure it
+     does not exceed the buffer capacity before calling memmove. This
+     prevents a negative length from being converted to a huge size_t. */
+  if (initial_read != SIZE_MAX && start >= 0 && (off_t)initial_read > start)
     {
-      memmove (buf, buf + start, initial_read - start);
-      initial_read -= start;
+      ssize_t diff = (ssize_t) initial_read - (ssize_t) start;
+      size_t to_copy = (size_t) diff;
+      if (to_copy > bufsize)
+        to_copy = bufsize;
+      memmove (buf, buf + (size_t) start, to_copy);
+      initial_read = to_copy;
     }
   else
     {
@@ -1018,6 +1029,7 @@ bytes_chunk_extract (uintmax_t k, uintmax_t n, char *buf, size_t bufsize,
     }
 }
 
+
 typedef struct of_info
 {
   char *of_name;
