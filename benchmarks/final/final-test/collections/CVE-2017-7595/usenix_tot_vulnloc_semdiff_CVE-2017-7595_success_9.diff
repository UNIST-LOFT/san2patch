diff --git a/libtiff/tif_jpeg.c b/libtiff/tif_jpeg.c
index 38595f98..39b70824 100644
--- a/libtiff/tif_jpeg.c
+++ b/libtiff/tif_jpeg.c
@@ -1675,27 +1675,39 @@ JPEGSetupEncode(TIFF* tif)
 	if (td->td_bitspersample != BITS_IN_JSAMPLE )
 #endif
 	{
+		/* Rationale: Check each sampling factor separately to ensure we do not
+		   perform a modulus by zero when validating tile dimensions. */
 		TIFFErrorExt(tif->tif_clientdata, module, "BitsPerSample %d not allowed for JPEG",
-			  (int) td->td_bitspersample);
+		      (int) td->td_bitspersample);
 		return (0);
 	}
 	sp->cinfo.c.data_precision = td->td_bitspersample;
 #ifdef JPEG_LIB_MK1
-        sp->cinfo.c.bits_in_jsample = td->td_bitspersample;
+// FIXME: Crash CWE-369: Divide By Zero
+         sp->cinfo.c.bits_in_jsample = td->td_bitspersample;
 #endif
 	if (isTiled(tif)) {
+		if (sp->v_sampling == 0) {
+			TIFFErrorExt(tif->tif_clientdata, module,
+			      "Invalid JPEG vertical sampling factor (zero)");
+			return (0);
+		}
 		if ((td->td_tilelength % (sp->v_sampling * DCTSIZE)) != 0) {
 			TIFFErrorExt(tif->tif_clientdata, module,
-				  "JPEG tile height must be multiple of %d",
-				  sp->v_sampling * DCTSIZE);
+			      "JPEG tile height must be multiple of %d",
+			      sp->v_sampling * DCTSIZE);
 			return (0);
 		}
-		if ((td->td_tilewidth % (sp->h_sampling * DCTSIZE)) != 0) {
+		if (sp->h_sampling == 0) {
 			TIFFErrorExt(tif->tif_clientdata, module,
-				  "JPEG tile width must be multiple of %d",
-				  sp->h_sampling * DCTSIZE);
+			      "Invalid JPEG horizontal sampling factor (zero)");
 			return (0);
 		}
+		if ((td->td_tilewidth % (sp->h_sampling * DCTSIZE)) != 0) {
+			TIFFErrorExt(tif->tif_clientdata, module,
+			      "JPEG tile width must be multiple of %d",
+			      sp->h_sampling * DCTSIZE);			return (0);
+		}
 	} else {
 		if (td->td_rowsperstrip < td->td_imagelength &&
 		    (td->td_rowsperstrip % (sp->v_sampling * DCTSIZE)) != 0) {
