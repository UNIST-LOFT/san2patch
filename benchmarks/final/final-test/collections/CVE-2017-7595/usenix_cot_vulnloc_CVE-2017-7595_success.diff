diff --git a/libtiff/tif_jpeg.c b/libtiff/tif_jpeg.c
index 38595f98..4b1e4374 100644
--- a/libtiff/tif_jpeg.c
+++ b/libtiff/tif_jpeg.c
@@ -1683,6 +1683,23 @@ JPEGSetupEncode(TIFF* tif)
 #ifdef JPEG_LIB_MK1
         sp->cinfo.c.bits_in_jsample = td->td_bitspersample;
 #endif
+	/*
+	 * Validate sampling factors and DCTSIZE to avoid division/modulus
+	 * by zero later when checking tile/strip dimensions. If any
+	 * denominator would be zero, report an error and abort setup.
+	 * Rationale: upstream code used expressions like
+	 *   (td->td_tilelength % (sp->v_sampling * DCTSIZE))
+	 * without ensuring (sp->v_sampling * DCTSIZE) != 0 which can
+	 * be triggered by crafted/corrupt TIFF metadata leading to an
+	 * FPE (divide/modulus by zero). This explicit check rejects
+	 * such invalid inputs early and prevents the crash.
+	 */
+	if ((sp->v_sampling == 0) || (sp->h_sampling == 0) || (DCTSIZE == 0)) {
+		TIFFErrorExt(tif->tif_clientdata, module,
+			  "Invalid JPEG parameters: h_sampling=%u, v_sampling=%u, DCTSIZE=%d",
+			  (unsigned) sp->h_sampling, (unsigned) sp->v_sampling, DCTSIZE);
+		return (0);
+	}
 	if (isTiled(tif)) {
 		if ((td->td_tilelength % (sp->v_sampling * DCTSIZE)) != 0) {
 			TIFFErrorExt(tif->tif_clientdata, module,
diff --git a/libtiff/tif_write.c b/libtiff/tif_write.c
index 045a79d0..1bad2200 100644
--- a/libtiff/tif_write.c
+++ b/libtiff/tif_write.c
@@ -417,7 +417,7 @@ TIFFWriteEncodedTile(TIFF* tif, uint32 tile, void* data, tmsize_t cc)
                     return ((tmsize_t)(-1));
             }
 
-	    /* Force TIFFAppendToStrip() to consider placing data at end
+	/* Force TIFFAppendToStrip() to consider placing data at end
                of file. */
             tif->tif_curoff = 0;
         }
@@ -441,6 +441,19 @@ TIFFWriteEncodedTile(TIFF* tif, uint32 tile, void* data, tmsize_t cc)
                 return ((tmsize_t)(-1));
         }
 	tif->tif_col = (tile % howmany32) * td->td_tilewidth;
+// FIXME: Crash CWE-369: Divide By Zero
+
+	/*
+	 * Validate values used as divisors to prevent divide-by-zero
+	 * errors. A zero td_stripsperimage would cause a division by zero
+	 * in the calculation below (sample = (uint16)(tile/td->td_stripsperimage)).
+	 * Reject such invalid metadata with a clean error instead of allowing
+	 * an arithmetic exception or undefined behavior.
+	 */
+	if (td->td_stripsperimage == 0) {
+		TIFFErrorExt(tif->tif_clientdata, module, "Zero strips per image (invalid td_stripsperimage)");
+		return ((tmsize_t)(-1));
+	}
 
 	if ((tif->tif_flags & TIFF_CODERSETUP) == 0) {
 		if (!(*tif->tif_setupencode)(tif))
@@ -474,6 +487,7 @@ TIFFWriteEncodedTile(TIFF* tif, uint32 tile, void* data, tmsize_t cc)
     }
 
     sample = (uint16)(tile/td->td_stripsperimage);
+
     if (!(*tif->tif_preencode)(tif, sample))
         return ((tmsize_t)(-1));
     /* swab if needed - note that source buffer will be altered */
