diff --git a/libtiff/tif_jpeg.c b/libtiff/tif_jpeg.c
index 38595f98..f7be1d23 100644
--- a/libtiff/tif_jpeg.c
+++ b/libtiff/tif_jpeg.c
@@ -1681,20 +1681,31 @@ JPEGSetupEncode(TIFF* tif)
 	}
 	sp->cinfo.c.data_precision = td->td_bitspersample;
 #ifdef JPEG_LIB_MK1
-        sp->cinfo.c.bits_in_jsample = td->td_bitspersample;
+// FIXME: Crash CWE-369: Divide By Zero
+         sp->cinfo.c.bits_in_jsample = td->td_bitspersample;
 #endif
+	/*
+	 * Rationale: Defensive check to avoid divide/modulo by zero when sampling
+	 * factors are zero or negative (CWE-369). Fail setup cleanly instead
+	 * of letting the arithmetic operations cause SIGFPE.
+	 */
+	if (sp->v_sampling <= 0 || sp->h_sampling <= 0) {
+		TIFFErrorExt(tif->tif_clientdata, module,
+			  "Invalid JPEG sampling factors h=%d v=%d",
+			  sp->h_sampling, sp->v_sampling);
+		return (0);
+	}
 	if (isTiled(tif)) {
 		if ((td->td_tilelength % (sp->v_sampling * DCTSIZE)) != 0) {
 			TIFFErrorExt(tif->tif_clientdata, module,
-				  "JPEG tile height must be multiple of %d",
-				  sp->v_sampling * DCTSIZE);
+			      "JPEG tile height must be multiple of %d",
+			      sp->v_sampling * DCTSIZE);
 			return (0);
 		}
 		if ((td->td_tilewidth % (sp->h_sampling * DCTSIZE)) != 0) {
 			TIFFErrorExt(tif->tif_clientdata, module,
-				  "JPEG tile width must be multiple of %d",
-				  sp->h_sampling * DCTSIZE);
-			return (0);
+			      "JPEG tile width must be multiple of %d",
+			      sp->h_sampling * DCTSIZE);			return (0);
 		}
 	} else {
 		if (td->td_rowsperstrip < td->td_imagelength &&
