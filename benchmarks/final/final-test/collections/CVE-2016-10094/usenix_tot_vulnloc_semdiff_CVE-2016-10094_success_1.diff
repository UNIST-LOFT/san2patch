diff --git a/tools/tiff2pdf.c b/tools/tiff2pdf.c
index 47d76298..5fd75be6 100644
--- a/tools/tiff2pdf.c
+++ b/tools/tiff2pdf.c
@@ -2895,34 +2895,54 @@ tsize_t t2p_readwrite_pdf_image_tile(T2P* t2p, TIFF* input, TIFF* output, ttile_
 				return(0);
 			}
 			if(TIFFGetField(input, TIFFTAG_JPEGTABLES, &count, &jpt) != 0) {
-				if (count >= 4) {
+					if (count >= 4) {
+                                        /* Rationale: Defensive boundary checks to avoid out-of-bounds
+                                           writes. Ensure buffer is valid and copying (count-2)
+                                           bytes fits within the previously allocated tiff_datasize
+                                           before performing the memcpy. If the checks fail,
+                                           free resources and return an error. */
+                                        if (buffer == NULL) {
+                                            t2p->t2p_error = T2P_ERR_ERROR;
+                                            return(0);
+                                        }
+                                        if ((size_t)bufferoffset + (size_t)(count - 2) > (size_t)t2p->tiff_datasize) {
+                                            _TIFFfree(buffer);
+                                            t2p->t2p_error = T2P_ERR_ERROR;
+                                            return(0);
+                                        }
                                         int retTIFFReadRawTile;
                     /* Ignore EOI marker of JpegTables */
-					_TIFFmemcpy(buffer, jpt, count - 2);
-					bufferoffset += count - 2;
+						_TIFFmemcpy(buffer, jpt, count - 2);
+						bufferoffset += count - 2;
                     /* Store last 2 bytes of the JpegTables */
-					table_end[0] = buffer[bufferoffset-2];
-					table_end[1] = buffer[bufferoffset-1];
-					xuint32 = bufferoffset;
+						table_end[0] = buffer[bufferoffset-2];
+						table_end[1] = buffer[bufferoffset-1];
+						xuint32 = bufferoffset;
                                         bufferoffset -= 2;
                                         retTIFFReadRawTile= TIFFReadRawTile(
-						input, 
-						tile, 
-						(tdata_t) &(((unsigned char*)buffer)[bufferoffset]), 
-						-1);
+							input, 
+							tile, 
+							(tdata_t) &(((unsigned char*)buffer)[bufferoffset]), 
+							-1);
                                         if( retTIFFReadRawTile < 0 )
                                         {
                                             _TIFFfree(buffer);
                                             t2p->t2p_error = T2P_ERR_ERROR;
                                             return(0);
                                         }
-					bufferoffset += retTIFFReadRawTile;
+						bufferoffset += retTIFFReadRawTile;
                     /* Overwrite SOI marker of image scan with previously */
                     /* saved end of JpegTables */
-					buffer[xuint32-2]=table_end[0];
-					buffer[xuint32-1]=table_end[1];
+                                        if (xuint32 < 2 || (size_t)xuint32 > (size_t)t2p->tiff_datasize) {
+                                            _TIFFfree(buffer);
+                                            t2p->t2p_error = T2P_ERR_ERROR;
+                                            return(0);
+                                        }
+						buffer[xuint32-2]=table_end[0];
+						buffer[xuint32-1]=table_end[1];
+					}
 				}
-			}
+
 			t2pWriteFile(output, (tdata_t) buffer, bufferoffset);
 			_TIFFfree(buffer);
 			return(bufferoffset);
