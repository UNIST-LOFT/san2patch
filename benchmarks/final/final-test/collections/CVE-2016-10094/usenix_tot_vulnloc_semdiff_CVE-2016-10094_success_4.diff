diff --git a/tools/tiff2pdf.c b/tools/tiff2pdf.c
index 47d76298..52b08ff3 100644
--- a/tools/tiff2pdf.c
+++ b/tools/tiff2pdf.c
@@ -2898,31 +2898,53 @@ tsize_t t2p_readwrite_pdf_image_tile(T2P* t2p, TIFF* input, TIFF* output, ttile_
 				if (count >= 4) {
                                         int retTIFFReadRawTile;
                     /* Ignore EOI marker of JpegTables */
-					_TIFFmemcpy(buffer, jpt, count - 2);
-					bufferoffset += count - 2;
+                    /* Rationale: Validate buffer and available space before copying to avoid
+                     * heap buffer overflow (check against t2p->tiff_datasize). If validation
+                     * fails, free buffer and abort processing this image.
+                     */
+                    if (buffer == NULL || (size_t)count < 2 || (size_t)bufferoffset > (size_t)t2p->tiff_datasize || (size_t)bufferoffset + (size_t)(count - 2) > (size_t)t2p->tiff_datasize) {
+                        _TIFFfree(buffer);
+                        t2p->t2p_error = T2P_ERR_ERROR;
+                        return(0);
+                    }
+				_TIFFmemcpy(buffer, jpt, count - 2);
+				bufferoffset += count - 2;
                     /* Store last 2 bytes of the JpegTables */
-					table_end[0] = buffer[bufferoffset-2];
-					table_end[1] = buffer[bufferoffset-1];
-					xuint32 = bufferoffset;
+				table_end[0] = buffer[bufferoffset-2];
+				table_end[1] = buffer[bufferoffset-1];
+				xuint32 = bufferoffset;
+                                        /* Ensure xuint32 is large enough before subtracting 2 */
+                                        if ((size_t)xuint32 < 2 || (size_t)(xuint32 - 2) > (size_t)t2p->tiff_datasize) {
+                                            _TIFFfree(buffer);
+                                            t2p->t2p_error = T2P_ERR_ERROR;
+                                            return(0);
+                                        }
                                         bufferoffset -= 2;
                                         retTIFFReadRawTile= TIFFReadRawTile(
-						input, 
-						tile, 
-						(tdata_t) &(((unsigned char*)buffer)[bufferoffset]), 
-						-1);
+					input, 
+					tile, 
+					(tdata_t) &(((unsigned char*)buffer)[bufferoffset]), 
+					-1);
                                         if( retTIFFReadRawTile < 0 )
                                         {
                                             _TIFFfree(buffer);
                                             t2p->t2p_error = T2P_ERR_ERROR;
                                             return(0);
                                         }
-					bufferoffset += retTIFFReadRawTile;
+                                        /* Ensure the tile read did not overflow the buffer */
+                                        if ((size_t)bufferoffset + (size_t)retTIFFReadRawTile > (size_t)t2p->tiff_datasize) {
+                                            _TIFFfree(buffer);
+                                            t2p->t2p_error = T2P_ERR_ERROR;
+                                            return(0);
+                                        }
+				bufferoffset += retTIFFReadRawTile;
                     /* Overwrite SOI marker of image scan with previously */
                     /* saved end of JpegTables */
-					buffer[xuint32-2]=table_end[0];
-					buffer[xuint32-1]=table_end[1];
-				}
+				buffer[xuint32-2]=table_end[0];
+				buffer[xuint32-1]=table_end[1];
 			}
+			}
+
 			t2pWriteFile(output, (tdata_t) buffer, bufferoffset);
 			_TIFFfree(buffer);
 			return(bufferoffset);
