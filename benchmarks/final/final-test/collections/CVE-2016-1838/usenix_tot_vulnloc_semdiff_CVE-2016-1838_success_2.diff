diff --git a/parser.c b/parser.c
index 68e1c90f..b73b6a6c 100644
--- a/parser.c
+++ b/parser.c
@@ -9825,23 +9825,48 @@ static void
 xmlParseEndTag2(xmlParserCtxtPtr ctxt, const xmlChar *prefix,
                 const xmlChar *URI, int line, int nsNr, int tlen) {
     const xmlChar *name;
+    size_t rem;
+
+    /* Rationale: compute remaining bytes once and validate before any
+     * reads or comparisons that could go past the buffer end. This prevents
+     * the single-byte out-of-bounds read when the input is truncated.
+     */
 
     GROW;
     if ((RAW != '<') || (NXT(1) != '/')) {
 	xmlFatalErr(ctxt, XML_ERR_LTSLASH_REQUIRED, NULL);
 	return;
     }
-    SKIP(2);
+// FIXME: Crash CWE-125: Out-of-bounds Read
+     SKIP(2);
+
+    /* compute remaining bytes in the input buffer */
+    rem = (ctxt->input != NULL && ctxt->input->cur != NULL && ctxt->input->end != NULL)
+          ? (size_t)(ctxt->input->end - ctxt->input->cur) : 0;
+
+    /* ensure we have at least tlen bytes available for the comparison */
+    if ((tlen > 0) && (rem < (size_t)tlen)) {
+        /* truncated end-tag: abort parsing with an error */
+        xmlFatalErr(ctxt, XML_ERR_TAG_NOT_FINISHED, NULL);
+        return;
+    }
 
     if ((tlen > 0) && (xmlStrncmp(ctxt->input->cur, ctxt->name, tlen) == 0)) {
-        if (ctxt->input->cur[tlen] == '>') {
-	    ctxt->input->cur += tlen + 1;
-	    ctxt->input->col += tlen + 1;
-	    goto done;
-	}
-	ctxt->input->cur += tlen;
-	ctxt->input->col += tlen;
-	name = (xmlChar*)1;
+        /* ensure we can safely access ctxt->input->cur[tlen] */
+        if (rem > (size_t)tlen) {
+            if (ctxt->input->cur[tlen] == '>') {
+		ctxt->input->cur += tlen + 1;
+		ctxt->input->col += tlen + 1;
+		goto done;
+	    }
+	    ctxt->input->cur += tlen;
+	    ctxt->input->col += tlen;
+	    name = (xmlChar*)1;
+        } else {
+            /* exactly tlen bytes available but no terminating '>' -> truncated */
+            xmlFatalErr(ctxt, XML_ERR_TAG_NOT_FINISHED, NULL);
+            return;
+        }
     } else {
 	if (prefix == NULL)
 	    name = xmlParseNameAndCompare(ctxt, ctxt->name);
@@ -9872,8 +9897,8 @@ xmlParseEndTag2(xmlParserCtxtPtr ctxt, const xmlChar *prefix,
         if ((line == 0) && (ctxt->node != NULL))
             line = ctxt->node->line;
         xmlFatalErrMsgStrIntStr(ctxt, XML_ERR_TAG_NAME_MISMATCH,
-		     "Opening and ending tag mismatch: %s line %d and %s\n",
-		                ctxt->name, line, name);
+	     "Opening and ending tag mismatch: %s line %d and %s\n",
+	                ctxt->name, line, name);
     }
 
     /*
@@ -9890,6 +9915,7 @@ done:
     return;
 }
 
+
 /**
  * xmlParseCDSect:
  * @ctxt:  an XML parser context
