diff --git a/tools/tiffcp.c b/tools/tiffcp.c
index bdf754c3..29fb16f5 100644
--- a/tools/tiffcp.c
+++ b/tools/tiffcp.c
@@ -1065,7 +1065,8 @@ DECLAREcpFunc(cpContig2SeparateByRow)
 	tdata_t outbuf;
 	register uint8 *inp, *outp;
 	register uint32 n;
-	uint32 row;
+// FIXME: Crash CWE-125: Out-of-bounds Read
+ 	uint32 row;
 	tsample_t s;
 
 	inbuf = _TIFFmalloc(scanlinesizein);
@@ -1075,26 +1076,43 @@ DECLAREcpFunc(cpContig2SeparateByRow)
 	_TIFFmemset(inbuf, 0, scanlinesizein);
 	_TIFFmemset(outbuf, 0, scanlinesizeout);
 	/* unpack channels */
-	for (s = 0; s < spp; s++) {
-		for (row = 0; row < imagelength; row++) {
-			if (TIFFReadScanline(in, inbuf, row, 0) < 0
-			    && !ignore) {
-				TIFFError(TIFFFileName(in),
-				    "Error, can't read scanline %lu",
-				    (unsigned long) row);
-				goto bad;
-			}
-			inp = ((uint8*)inbuf) + s;
-			outp = (uint8*)outbuf;
-			for (n = imagewidth; n-- > 0;) {
-				*outp++ = *inp;
-				inp += spp;
-			}
-			if (TIFFWriteScanline(out, outbuf, row, s) < 0) {
-				TIFFError(TIFFFileName(out),
-				    "Error, can't write scanline %lu",
-				    (unsigned long) row);
-				goto bad;
+	/* Rationale: add explicit end-pointer checks to prevent any read/write
+	   beyond the allocated scanline buffers. This ensures the inner loop
+	   will not dereference inp/outp if they point past the allocated region. */
+	{
+		uint8 *inend = (uint8*)inbuf + scanlinesizein;
+		uint8 *outend = (uint8*)outbuf + scanlinesizeout;
+		if (scanlinesizein <= 0 || scanlinesizeout <= 0)
+			goto bad;
+
+		for (s = 0; s < spp; s++) {
+			for (row = 0; row < imagelength; row++) {
+				if (TIFFReadScanline(in, inbuf, row, 0) < 0
+				    && !ignore) {
+					TIFFError(TIFFFileName(in),
+					    "Error, can't read scanline %lu",
+					    (unsigned long) row);
+					goto bad;
+				}
+				inp = ((uint8*)inbuf) + s;
+				outp = (uint8*)outbuf;
+				for (n = imagewidth; n-- > 0;) {
+					/* bounds check before dereferencing */
+					if (inp >= inend || outp >= outend) {
+						TIFFError(TIFFFileName(in),
+						    "Error, scanline buffer too small (s=%u, row=%u)",
+						    (unsigned) s, (unsigned) row);
+						goto bad;
+					}
+					*outp++ = *inp;
+					inp += spp;
+				}
+				if (TIFFWriteScanline(out, outbuf, row, s) < 0) {
+					TIFFError(TIFFFileName(out),
+					    "Error, can't write scanline %lu",
+					    (unsigned long) row);
+					goto bad;
+				}
 			}
 		}
 	}
@@ -1107,6 +1125,7 @@ bad:
 	return 0;
 }
 
+
 /*
  * Separate -> contig by row.
  */
