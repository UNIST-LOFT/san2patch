diff --git a/zzip/memdisk.c b/zzip/memdisk.c
index 007e7ce..7842fba 100644
--- a/zzip/memdisk.c
+++ b/zzip/memdisk.c
@@ -165,8 +165,7 @@ zzip_mem_disk_load(ZZIP_MEM_DISK * dir, ZZIP_DISK * disk)
  */
 zzip__new__ ZZIP_MEM_ENTRY *
 zzip_mem_entry_new(ZZIP_DISK * disk, ZZIP_DISK_ENTRY * entry)
-{
-    if (! disk || ! entry)
+if (! disk || ! entry)
         { errno=EINVAL; return 0; }
     ___ ZZIP_MEM_ENTRY *item = calloc(1, sizeof(*item));
     if (! item)
@@ -192,31 +191,48 @@ zzip_mem_entry_new(ZZIP_DISK * disk, ZZIP_DISK_ENTRY * entry)
     {   /* copy the extra blocks to memory as well (maximum 64K each) */
         zzip_size_t /*    */ ext1_len = zzip_disk_entry_get_extras(entry);
         char *_zzip_restrict ext1_ptr = zzip_disk_entry_to_extras(entry);
-        zzip_size_t /*    */ ext2_len = zzip_file_header_get_extras(header);
+// FIXME: Crash CWE-125: Out-of-bounds Read
+         zzip_size_t /*    */ ext2_len = zzip_file_header_get_extras(header);
         char *_zzip_restrict ext2_ptr = zzip_file_header_to_extras(header);
 
-        if (ext1_ptr + ext1_len >= disk->endbuf ||
-            ext2_ptr + ext2_len >= disk->endbuf)
+        /* Rationale: avoid pointer-addition overflow and ensure the lengths
+         * are within the remaining disk buffer. Compute remaining sizes
+         * by subtraction and validate ext*_len <= remaining before malloc
+         * and memcpy. Also allocate one extra byte and NUL-terminate to
+         * prevent accidental OOB string reads in downstream code.
+         */
+        if (ext1_ptr >= disk->endbuf || ext2_ptr >= disk->endbuf)
         {
             errno = EBADMSG; /* format error CVE-2017-5978 */
             goto error; /* zzip_mem_entry_free(item); return 0; */
         }
 
+        {
+            size_t rem1 = (size_t)(disk->endbuf - ext1_ptr);
+            size_t rem2 = (size_t)(disk->endbuf - ext2_ptr);
+            if (ext1_len > rem1 || ext2_len > rem2) {
+                errno = EBADMSG; /* format error CVE-2017-5978 */
+                goto error;
+            }
+        }
+
         if (ext1_len)
         {
-            void *mem = malloc(ext1_len);
+            void *mem = malloc(ext1_len + 1);
             if (! mem) goto error; /* errno = ENOMEM */
             item->zz_ext[1] = mem;
             item->zz_extlen[1] = ext1_len;
             memcpy(mem, ext1_ptr, ext1_len);
+            ((unsigned char*)mem)[ext1_len] = '\0';
         }
         if (ext2_len)
         {
-            void *mem = malloc(ext2_len);
+            void *mem = malloc(ext2_len + 1);
             if (! mem) goto error; /* errno = ENOMEM */
             item->zz_ext[2] = mem;
             item->zz_extlen[2] = ext2_len;
             memcpy(mem, ext2_ptr, ext2_len);
+            ((unsigned char*)mem)[ext2_len] = '\0';
         }
     }
     {
@@ -243,6 +259,7 @@ error:
     ____;
 }
 
+
 /* find an extra block for the given datatype code.
  * The returned EXTRA_BLOCK is still in disk-encoding but
  * already a pointer into an allocated heap space block.
