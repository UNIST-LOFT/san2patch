diff --git a/tools/tiffcrop.c b/tools/tiffcrop.c
index 47177373..c78e7a33 100644
--- a/tools/tiffcrop.c
+++ b/tools/tiffcrop.c
@@ -1147,8 +1147,8 @@ static int writeBufferToContigStrips(TIFF* out, uint8* buf, uint32 imagelength)
  */
 static int 
 writeBufferToSeparateStrips (TIFF* out, uint8* buf, 
-			     uint32 length, uint32 width, uint16 spp,
-			     struct dump_opts *dump)
+		     uint32 length, uint32 width, uint16 spp,
+		     struct dump_opts *dump)
   {
   uint8   *src;
   uint16   bps;
@@ -1165,11 +1165,46 @@ writeBufferToSeparateStrips (TIFF* out, uint8* buf,
   (void) TIFFGetField(out, TIFFTAG_BITSPERSAMPLE, &bps);
   bytes_per_sample = (bps + 7) / 8;
   rowsize = ((bps * spp * width) + 7) / 8; /* source has interleaved samples */
-  rowstripsize = rowsperstrip * bytes_per_sample * (width + 1); 
+// FIXME: Crash CWE-787: Out-of-bounds Write
+   
+  /* Rationale:
+   * Prefer using TIFF helpers when they provide a plausible size.
+   * If helper sizes are not usable, compute size with guarded arithmetic.
+   */
+  {
+  /* Try to obtain a suggested strip size from the library for the full rowsperstrip */
+  tsize_t suggested = TIFFVStripSize(out, rowsperstrip);
+  if (suggested > 0) /* Accept the suggested size when reasonable */
+    {
+    /* Validate suggested to avoid negative or absurd values */
+    uint64_t s64 = (uint64_t) suggested;
+    if (s64 > (uint64_t)((size_t)-1))
+      return 1;
+    rowstripsize = suggested;
+    obuf = _TIFFmalloc(rowstripsize);
+    if (obuf == NULL)
+      return 1;
+    }
+  else
+    {
+    /* Fallback: compute required size with guarded 64-bit arithmetic */
+    uint64_t total_bits_per_row = (uint64_t)width * (uint64_t)spp * (uint64_t)bps;
+    if (width != 0 && spp != 0 && (total_bits_per_row / (uint64_t)width / (uint64_t)spp) != (uint64_t)bps)
+      return 1;
 
-  obuf = _TIFFmalloc (rowstripsize);
-  if (obuf == NULL)
-    return 1;
+    uint64_t bytes_per_row64 = (total_bits_per_row + 7) / 8;
+    uint64_t total_bytes64 = bytes_per_row64 * (uint64_t)rowsperstrip;
+    if (rowsperstrip != 0 && (total_bytes64 / (uint64_t)rowsperstrip) != bytes_per_row64)
+      return 1;
+    if (total_bytes64 > (uint64_t)((size_t)-1))
+      return 1;
+
+    rowstripsize = (tsize_t) total_bytes64;
+    obuf = _TIFFmalloc(rowstripsize);
+    if (obuf == NULL)
+      return 1;
+    }
+  }
   
   for (s = 0; s < spp; s++)
     {
@@ -1198,6 +1233,7 @@ writeBufferToSeparateStrips (TIFF* out, uint8* buf,
         {
 	TIFFError(TIFFFileName(out), "Error, can't write strip %u", strip - 1);
 	_TIFFfree(obuf);
+
 	return 1;
 	}
       }
@@ -3517,6 +3553,26 @@ extractContigSamplesToBuffer(uint8 *out, uint8 *in, uint32 rows, uint32 cols,
     src = in + src_offset;
     dst = out + dst_offset;
 
+    /* Rationale: For the 24-bit packed path perform an explicit, guarded
+       calculation of required destination bytes and bail out if the
+       pre-allocated destination row size is insufficient. This prevents the
+       one-byte heap-write observed for packed 24-bit samples. */
+    if (shift_width == 2)
+      {
+      uint64_t total_bits_per_row = (uint64_t)cols * (uint64_t)spp * (uint64_t)bps;
+      if ((cols != 0) && (total_bits_per_row / (uint64_t)cols != (uint64_t)spp * (uint64_t)bps))
+        {
+        TIFFError ("extractContigSamplesToBuffer", "Integer overflow calculating row size for 24-bit path");
+        return (1);
+        }
+      uint64_t required_bytes = (total_bits_per_row + 7) / 8;
+      if (required_bytes > (uint64_t)dst_rowsize)
+        {
+        TIFFError ("extractContigSamplesToBuffer", "Buffer too small for 24-bit pack: need %llu, have %u", (unsigned long long)required_bytes, dst_rowsize);
+        return (1);
+        }
+      }
+
     /* pack the data into the scanline */
     switch (shift_width)
       {  
@@ -3534,7 +3590,8 @@ extractContigSamplesToBuffer(uint8 *out, uint8 *in, uint32 rows, uint32 cols,
 	      else
                  if (extractContigSamples16bits (src, dst, cols, sample,
                                                  spp, bps, count, first_col, cols))
-	         return (1);
+// FIXME: Crash CWE-787: Out-of-bounds Write
+ 	         return (1);
 	      break;
       case 2: if (extractContigSamples24bits (src, dst, cols, sample,
                                               spp, bps,  count, first_col, cols))
@@ -3558,15 +3615,16 @@ extractContigSamplesToBuffer(uint8 *out, uint8 *in, uint32 rows, uint32 cols,
 
 static int
 extractContigSamplesToTileBuffer(uint8 *out, uint8 *in, uint32 rows, uint32 cols,
-  	                         uint32 imagewidth, uint32 tilewidth, tsample_t sample,
-				 uint16 count, uint16 spp, uint16 bps, struct dump_opts *dump)
+	                         uint32 imagewidth, uint32 tilewidth, tsample_t sample,
+			 uint16 count, uint16 spp, uint16 bps, struct dump_opts *dump)
   {
   int    shift_width, bytes_per_sample, bytes_per_pixel;
   uint32 src_rowsize, src_offset, row;
   uint32 dst_rowsize, dst_offset;
   uint8 *src, *dst;
 
-  bytes_per_sample = (bps + 7) / 8; 
+  bytes_per_sample = (bps + 7) / 8;
+ 
   bytes_per_pixel  = ((bps * spp) + 7) / 8;
   if ((bps % 8) == 0)
     shift_width = 0;
