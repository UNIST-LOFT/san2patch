diff --git a/libtiff/tif_dirwrite.c b/libtiff/tif_dirwrite.c
index c9e871be..e0da7b0f 100644
--- a/libtiff/tif_dirwrite.c
+++ b/libtiff/tif_dirwrite.c
@@ -953,63 +953,92 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 		return (0);
 	}
 
-	switch (tif->tif_dir.td_sampleformat)
-	{
-		case SAMPLEFORMAT_IEEEFP:
-			if (tif->tif_dir.td_bitspersample<=32)
-			{
-				for (i = 0; i < count; ++i)
-					((float*)conv)[i] = (float)value[i];
-				ok = TIFFWriteDirectoryTagFloatArray(tif,ndir,dir,tag,count,(float*)conv);
-			}
-			else
-			{
-				ok = TIFFWriteDirectoryTagDoubleArray(tif,ndir,dir,tag,count,value);
-			}
-			break;
-		case SAMPLEFORMAT_INT:
-			if (tif->tif_dir.td_bitspersample<=8)
-			{
-				for (i = 0; i < count; ++i)
-					((int8*)conv)[i] = (int8)value[i];
-				ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);
-			}
-			else if (tif->tif_dir.td_bitspersample<=16)
-			{
-				for (i = 0; i < count; ++i)
-					((int16*)conv)[i] = (int16)value[i];
-				ok = TIFFWriteDirectoryTagSshortArray(tif,ndir,dir,tag,count,(int16*)conv);
-			}
-			else
-			{
-				for (i = 0; i < count; ++i)
-					((int32*)conv)[i] = (int32)value[i];
-				ok = TIFFWriteDirectoryTagSlongArray(tif,ndir,dir,tag,count,(int32*)conv);
-			}
-			break;
-		case SAMPLEFORMAT_UINT:
-			if (tif->tif_dir.td_bitspersample<=8)
-			{
-				for (i = 0; i < count; ++i)
-					((uint8*)conv)[i] = (uint8)value[i];
-				ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
-			}
-			else if (tif->tif_dir.td_bitspersample<=16)
-			{
-				for (i = 0; i < count; ++i)
-					((uint16*)conv)[i] = (uint16)value[i];
-				ok = TIFFWriteDirectoryTagShortArray(tif,ndir,dir,tag,count,(uint16*)conv);
-			}
-			else
-			{
-				for (i = 0; i < count; ++i)
-					((uint32*)conv)[i] = (uint32)value[i];
-				ok = TIFFWriteDirectoryTagLongArray(tif,ndir,dir,tag,count,(uint32*)conv);
-			}
-			break;
-		default:
-			ok = 0;
-	}
+	/* Provide a small, portable finiteness test that does not require linking
+   against libm or relying on isfinite() being available at link time.
+   This macro detects NaN (x != x) and infinities (x - x is NaN), so a value
+   is finite when it equals itself and x - x equals 0.0. */
+#define SAFE_ISFINITE(x) (((x) == (x)) && (((x) - (x)) == 0.0))
+
+    switch (tif->tif_dir.td_sampleformat)
+    {
+        case SAMPLEFORMAT_IEEEFP:
+            if (tif->tif_dir.td_bitspersample<=32)
+            {
+                for (i = 0; i < count; ++i) {
+                    if (!SAFE_ISFINITE(value[i])) { ok = 0; break; }
+                    ((float*)conv)[i] = (float)value[i];
+                }
+                if (ok)
+                    ok = TIFFWriteDirectoryTagFloatArray(tif,ndir,dir,tag,count,(float*)conv);
+            }
+            else
+            {
+                ok = TIFFWriteDirectoryTagDoubleArray(tif,ndir,dir,tag,count,value);
+            }
+            break;
+        case SAMPLEFORMAT_INT:
+            if (tif->tif_dir.td_bitspersample<=8)
+            {
+                for (i = 0; i < count; ++i) {
+                    if (!SAFE_ISFINITE(value[i]) || value[i] < -128.0 || value[i] > 127.0) { ok = 0; break; }
+                    ((int8*)conv)[i] = (int8)value[i];
+                }
+                if (ok)
+                    ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);
+            }
+            else if (tif->tif_dir.td_bitspersample<=16)
+            {
+                for (i = 0; i < count; ++i) {
+                    if (!SAFE_ISFINITE(value[i]) || value[i] < -32768.0 || value[i] > 32767.0) { ok = 0; break; }
+                    ((int16*)conv)[i] = (int16)value[i];
+                }
+                if (ok)
+                    ok = TIFFWriteDirectoryTagSshortArray(tif,ndir,dir,tag,count,(int16*)conv);
+            }
+            else
+            {
+                for (i = 0; i < count; ++i) {
+                    if (!SAFE_ISFINITE(value[i]) || value[i] < -2147483648.0 || value[i] > 2147483647.0) { ok = 0; break; }
+                    ((int32*)conv)[i] = (int32)value[i];
+                }
+                if (ok)
+                    ok = TIFFWriteDirectoryTagSlongArray(tif,ndir,dir,tag,count,(int32*)conv);
+            }
+            break;
+        case SAMPLEFORMAT_UINT:
+            if (tif->tif_dir.td_bitspersample<=8)
+            {
+                for (i = 0; i < count; ++i) {
+                    if (!SAFE_ISFINITE(value[i]) || value[i] < 0.0 || value[i] > 255.0) { ok = 0; break; }
+                    ((uint8*)conv)[i] = (uint8)value[i];
+                }
+                if (ok)
+                    ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
+            }
+            else if (tif->tif_dir.td_bitspersample<=16)
+            {
+                for (i = 0; i < count; ++i) {
+                    if (!SAFE_ISFINITE(value[i]) || value[i] < 0.0 || value[i] > 65535.0) { ok = 0; break; }
+                    ((uint16*)conv)[i] = (uint16)value[i];
+                }
+                if (ok)
+                    ok = TIFFWriteDirectoryTagShortArray(tif,ndir,dir,tag,count,(uint16*)conv);
+            }
+            else
+            {
+                for (i = 0; i < count; ++i) {
+                    if (!SAFE_ISFINITE(value[i]) || value[i] < 0.0 || value[i] > 4294967295.0) { ok = 0; break; }
+                    ((uint32*)conv)[i] = (uint32)value[i];
+                }
+                if (ok)
+                    ok = TIFFWriteDirectoryTagLongArray(tif,ndir,dir,tag,count,(uint32*)conv);
+            }
+            break;
+        default:
+            ok = 0;
+    }
+
+#undef SAFE_ISFINITE
 
 	_TIFFfree(conv);
 	return (ok);
