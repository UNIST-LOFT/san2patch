diff --git a/libtiff/tif_dirwrite.c b/libtiff/tif_dirwrite.c
index c9e871be..374ffcaf 100644
--- a/libtiff/tif_dirwrite.c
+++ b/libtiff/tif_dirwrite.c
@@ -975,10 +975,22 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 				ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);
 			}
 			else if (tif->tif_dir.td_bitspersample<=16)
-			{
+// FIXME: Crash CWE-197: Numeric Truncation Error
+ 			{
+				/* Rationale: Prevent silent narrowing of out-of-range or NaN values into int16. */
 				for (i = 0; i < count; ++i)
+				{
+					/* Validate value before narrowing: reject NaN/Inf and out-of-range */
+					if (value[i] != value[i] || value[i] < -32768.0 || value[i] > 32767.0)
+					{
+						TIFFError(tif->tif_name, "Value for tag %u is out of range for signed 16-bit: %f", tag, value[i]);
+						ok = 0;
+						break;
+					}
 					((int16*)conv)[i] = (int16)value[i];
-				ok = TIFFWriteDirectoryTagSshortArray(tif,ndir,dir,tag,count,(int16*)conv);
+				}
+				if (ok)
+					ok = TIFFWriteDirectoryTagSshortArray(tif,ndir,dir,tag,count,(int16*)conv);
 			}
 			else
 			{
@@ -1002,15 +1014,26 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 			}
 			else
 			{
+				/* Rationale: Avoid converting NaN/Inf or negative/out-of-range doubles into uint32. */
 				for (i = 0; i < count; ++i)
+				{
+					if (value[i] != value[i] || value[i] < 0.0 || value[i] > 4294967295.0)
+					{
+						TIFFError(tif->tif_name, "Value for tag %u is invalid for unsigned 32-bit: %f", tag, value[i]);
+						ok = 0;
+						break;
+					}
 					((uint32*)conv)[i] = (uint32)value[i];
-				ok = TIFFWriteDirectoryTagLongArray(tif,ndir,dir,tag,count,(uint32*)conv);
+				}
+				if (ok)
+					ok = TIFFWriteDirectoryTagLongArray(tif,ndir,dir,tag,count,(uint32*)conv);
 			}
 			break;
 		default:
 			ok = 0;
 	}
 
+
 	_TIFFfree(conv);
 	return (ok);
 }
