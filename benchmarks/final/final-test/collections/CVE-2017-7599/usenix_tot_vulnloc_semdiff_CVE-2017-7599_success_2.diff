diff --git a/libtiff/tif_dirwrite.c b/libtiff/tif_dirwrite.c
index c9e871be..00db56ba 100644
--- a/libtiff/tif_dirwrite.c
+++ b/libtiff/tif_dirwrite.c
@@ -953,11 +953,18 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 		return (0);
 	}
 
-	switch (tif->tif_dir.td_sampleformat)
+	/* Rationale: Use the compiler builtin __builtin_isfinite rather than isfinite() to avoid
+   implicit-declaration and undefined-reference link errors when libm is not linked. The
+   builtin maps to a compiler intrinsic (GCC/Clang) and doesn't require additional
+   libraries. The rest of the previous validation logic is preserved. */
+switch (tif->tif_dir.td_sampleformat)
 	{
 		case SAMPLEFORMAT_IEEEFP:
 			if (tif->tif_dir.td_bitspersample<=32)
 			{
+				for (i = 0; i < count; ++i)
+					if (!__builtin_isfinite(value[i]))
+						return (0);
 				for (i = 0; i < count; ++i)
 					((float*)conv)[i] = (float)value[i];
 				ok = TIFFWriteDirectoryTagFloatArray(tif,ndir,dir,tag,count,(float*)conv);
@@ -971,19 +978,34 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 			if (tif->tif_dir.td_bitspersample<=8)
 			{
 				for (i = 0; i < count; ++i)
+				{
+					/* check finite and range for signed 8-bit */
+					if (!__builtin_isfinite(value[i]) || value[i] < -128.0 || value[i] > 127.0)
+						return (0);
 					((int8*)conv)[i] = (int8)value[i];
+				}
 				ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);
 			}
 			else if (tif->tif_dir.td_bitspersample<=16)
 			{
 				for (i = 0; i < count; ++i)
+				{
+					/* check finite and range for signed 16-bit */
+					if (!__builtin_isfinite(value[i]) || value[i] < -32768.0 || value[i] > 32767.0)
+						return (0);
 					((int16*)conv)[i] = (int16)value[i];
+				}
 				ok = TIFFWriteDirectoryTagSshortArray(tif,ndir,dir,tag,count,(int16*)conv);
 			}
 			else
 			{
 				for (i = 0; i < count; ++i)
+				{
+					/* check finite and range for signed 32-bit */
+					if (!__builtin_isfinite(value[i]) || value[i] < -2147483648.0 || value[i] > 2147483647.0)
+						return (0);
 					((int32*)conv)[i] = (int32)value[i];
+				}
 				ok = TIFFWriteDirectoryTagSlongArray(tif,ndir,dir,tag,count,(int32*)conv);
 			}
 			break;
@@ -991,25 +1013,41 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 			if (tif->tif_dir.td_bitspersample<=8)
 			{
 				for (i = 0; i < count; ++i)
+				{
+					/* check finite and range for unsigned 8-bit */
+					if (!__builtin_isfinite(value[i]) || value[i] < 0.0 || value[i] > 255.0)
+						return (0);
 					((uint8*)conv)[i] = (uint8)value[i];
+				}
 				ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
 			}
 			else if (tif->tif_dir.td_bitspersample<=16)
 			{
 				for (i = 0; i < count; ++i)
+				{
+					/* check finite and range for unsigned 16-bit */
+					if (!__builtin_isfinite(value[i]) || value[i] < 0.0 || value[i] > 65535.0)
+						return (0);
 					((uint16*)conv)[i] = (uint16)value[i];
+				}
 				ok = TIFFWriteDirectoryTagShortArray(tif,ndir,dir,tag,count,(uint16*)conv);
 			}
 			else
 			{
 				for (i = 0; i < count; ++i)
+				{
+					/* check finite and range for unsigned 32-bit */
+					if (!__builtin_isfinite(value[i]) || value[i] < 0.0 || value[i] > 4294967295.0)
+						return (0);
 					((uint32*)conv)[i] = (uint32)value[i];
+				}
 				ok = TIFFWriteDirectoryTagLongArray(tif,ndir,dir,tag,count,(uint32*)conv);
 			}
 			break;
 		default:
 			ok = 0;
-	}
+		}
+
 
 	_TIFFfree(conv);
 	return (ok);
