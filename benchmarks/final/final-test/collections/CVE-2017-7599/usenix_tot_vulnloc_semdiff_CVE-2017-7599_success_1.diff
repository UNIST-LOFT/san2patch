diff --git a/libtiff/tif_dirwrite.c b/libtiff/tif_dirwrite.c
index c9e871be..c96f1576 100644
--- a/libtiff/tif_dirwrite.c
+++ b/libtiff/tif_dirwrite.c
@@ -954,62 +954,98 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 	}
 
 	switch (tif->tif_dir.td_sampleformat)
-	{
-		case SAMPLEFORMAT_IEEEFP:
-			if (tif->tif_dir.td_bitspersample<=32)
-			{
-				for (i = 0; i < count; ++i)
-					((float*)conv)[i] = (float)value[i];
-				ok = TIFFWriteDirectoryTagFloatArray(tif,ndir,dir,tag,count,(float*)conv);
+{
+	/* Rationale: Avoid using isfinite() (which may require linking libm) and
+	   instead perform portable NaN/infinity checks using comparisons and
+	   explicit numeric bounds. NaN is detected as (v != v). Infinity will be
+	   caught by the numeric range checks below. Use a literal for FLT_MAX to
+	   avoid requiring #include <float.h> in this patch context. */
+	case SAMPLEFORMAT_IEEEFP:
+		if (tif->tif_dir.td_bitspersample<=32)
+		{
+			for (i = 0; i < count; ++i) {
+				double v = value[i];
+				/* Check for NaN and +/-infinity (using float max literal). */
+				if (!(v == v) || v < -3.402823466e+38 || v > 3.402823466e+38) { ok = 0; break; }
+				((float*)conv)[i] = (float)v;
 			}
-			else
-			{
-				ok = TIFFWriteDirectoryTagDoubleArray(tif,ndir,dir,tag,count,value);
+			if (ok)
+				ok = TIFFWriteDirectoryTagFloatArray(tif,ndir,dir,tag,count,(float*)conv);
+		}
+		else
+		{
+			ok = TIFFWriteDirectoryTagDoubleArray(tif,ndir,dir,tag,count,value);
+		}
+		break;
+	case SAMPLEFORMAT_INT:
+		if (tif->tif_dir.td_bitspersample<=8)
+		{
+			for (i = 0; i < count; ++i) {
+				double v = value[i];
+				/* detect NaN via v!=v; check explicit range for 8-bit signed */
+				if (!(v == v) || v < -128.0 || v > 127.0) { ok = 0; break; }
+				((int8*)conv)[i] = (int8)v;
 			}
-			break;
-		case SAMPLEFORMAT_INT:
-			if (tif->tif_dir.td_bitspersample<=8)
-			{
-				for (i = 0; i < count; ++i)
-					((int8*)conv)[i] = (int8)value[i];
+			if (ok)
 				ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);
+		}
+		else if (tif->tif_dir.td_bitspersample<=16)
+		{
+			for (i = 0; i < count; ++i) {
+				double v = value[i];
+				if (!(v == v) || v < -32768.0 || v > 32767.0) { ok = 0; break; }
+				((int16*)conv)[i] = (int16)v;
 			}
-			else if (tif->tif_dir.td_bitspersample<=16)
-			{
-				for (i = 0; i < count; ++i)
-					((int16*)conv)[i] = (int16)value[i];
+			if (ok)
 				ok = TIFFWriteDirectoryTagSshortArray(tif,ndir,dir,tag,count,(int16*)conv);
+		}
+		else
+		{
+			for (i = 0; i < count; ++i) {
+				double v = value[i];
+				if (!(v == v) || v < -2147483648.0 || v > 2147483647.0) { ok = 0; break; }
+				((int32*)conv)[i] = (int32)v;
 			}
-			else
-			{
-				for (i = 0; i < count; ++i)
-					((int32*)conv)[i] = (int32)value[i];
+			if (ok)
 				ok = TIFFWriteDirectoryTagSlongArray(tif,ndir,dir,tag,count,(int32*)conv);
+		}
+		break;
+	case SAMPLEFORMAT_UINT:
+		if (tif->tif_dir.td_bitspersample<=8)
+		{
+			for (i = 0; i < count; ++i) {
+				double v = value[i];
+				if (!(v == v) || v < 0.0 || v > 255.0) { ok = 0; break; }
+				((uint8*)conv)[i] = (uint8)v;
 			}
-			break;
-		case SAMPLEFORMAT_UINT:
-			if (tif->tif_dir.td_bitspersample<=8)
-			{
-				for (i = 0; i < count; ++i)
-					((uint8*)conv)[i] = (uint8)value[i];
+			if (ok)
 				ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
+		}
+		else if (tif->tif_dir.td_bitspersample<=16)
+		{
+			for (i = 0; i < count; ++i) {
+				double v = value[i];
+				if (!(v == v) || v < 0.0 || v > 65535.0) { ok = 0; break; }
+				((uint16*)conv)[i] = (uint16)v;
 			}
-			else if (tif->tif_dir.td_bitspersample<=16)
-			{
-				for (i = 0; i < count; ++i)
-					((uint16*)conv)[i] = (uint16)value[i];
+			if (ok)
 				ok = TIFFWriteDirectoryTagShortArray(tif,ndir,dir,tag,count,(uint16*)conv);
+		}
+		else
+		{
+			for (i = 0; i < count; ++i) {
+				double v = value[i];
+				if (!(v == v) || v < 0.0 || v > 4294967295.0) { ok = 0; break; }
+				((uint32*)conv)[i] = (uint32)v;
 			}
-			else
-			{
-				for (i = 0; i < count; ++i)
-					((uint32*)conv)[i] = (uint32)value[i];
+			if (ok)
 				ok = TIFFWriteDirectoryTagLongArray(tif,ndir,dir,tag,count,(uint32*)conv);
-			}
-			break;
-		default:
-			ok = 0;
-	}
+		}
+		break;
+	default:
+		ok = 0;
+}
+
 
 	_TIFFfree(conv);
 	return (ok);
