diff --git a/libtiff/tif_dirwrite.c b/libtiff/tif_dirwrite.c
index c9e871be..dcd534b2 100644
--- a/libtiff/tif_dirwrite.c
+++ b/libtiff/tif_dirwrite.c
@@ -954,62 +954,103 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 	}
 
 	switch (tif->tif_dir.td_sampleformat)
-	{
-		case SAMPLEFORMAT_IEEEFP:
-			if (tif->tif_dir.td_bitspersample<=32)
-			{
-				for (i = 0; i < count; ++i)
-					((float*)conv)[i] = (float)value[i];
-				ok = TIFFWriteDirectoryTagFloatArray(tif,ndir,dir,tag,count,(float*)conv);
-			}
-			else
-			{
-				ok = TIFFWriteDirectoryTagDoubleArray(tif,ndir,dir,tag,count,value);
-			}
-			break;
-		case SAMPLEFORMAT_INT:
-			if (tif->tif_dir.td_bitspersample<=8)
-			{
-				for (i = 0; i < count; ++i)
-					((int8*)conv)[i] = (int8)value[i];
-				ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);
-			}
-			else if (tif->tif_dir.td_bitspersample<=16)
-			{
-				for (i = 0; i < count; ++i)
-					((int16*)conv)[i] = (int16)value[i];
-				ok = TIFFWriteDirectoryTagSshortArray(tif,ndir,dir,tag,count,(int16*)conv);
-			}
-			else
-			{
-				for (i = 0; i < count; ++i)
-					((int32*)conv)[i] = (int32)value[i];
-				ok = TIFFWriteDirectoryTagSlongArray(tif,ndir,dir,tag,count,(int32*)conv);
-			}
-			break;
-		case SAMPLEFORMAT_UINT:
-			if (tif->tif_dir.td_bitspersample<=8)
-			{
-				for (i = 0; i < count; ++i)
-					((uint8*)conv)[i] = (uint8)value[i];
-				ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
-			}
-			else if (tif->tif_dir.td_bitspersample<=16)
-			{
-				for (i = 0; i < count; ++i)
-					((uint16*)conv)[i] = (uint16)value[i];
-				ok = TIFFWriteDirectoryTagShortArray(tif,ndir,dir,tag,count,(uint16*)conv);
-			}
-			else
-			{
-				for (i = 0; i < count; ++i)
-					((uint32*)conv)[i] = (uint32)value[i];
-				ok = TIFFWriteDirectoryTagLongArray(tif,ndir,dir,tag,count,(uint32*)conv);
-			}
-			break;
-		default:
-			ok = 0;
-	}
+{
+	/* Rationale: Avoid use of isfinite() to prevent implicit declaration/undefined
+	   reference to libm. Use comparisons that detect NaN (dv != dv) and range
+	   checks to reject infinities and out-of-range values. */
+	case SAMPLEFORMAT_IEEEFP:
+		if (tif->tif_dir.td_bitspersample<=32)
+		{
+			for (i = 0; i < count; ++i)
+				((float*)conv)[i] = (float)value[i];
+			ok = TIFFWriteDirectoryTagFloatArray(tif,ndir,dir,tag,count,(float*)conv);
+		}
+		else
+		{
+			ok = TIFFWriteDirectoryTagDoubleArray(tif,ndir,dir,tag,count,value);
+		}
+		break;
+	case SAMPLEFORMAT_INT:
+		if (tif->tif_dir.td_bitspersample<=8)
+		{
+			int valid = 1;
+			for (i = 0; i < count; ++i) {
+				double dv = value[i];
+				/* dv == dv is false for NaN; infinities will be caught by range checks */
+				if (!(dv == dv) || dv < -128.0 || dv > 127.0) { valid = 0; break; }
+			}
+			if (!valid) { ok = 0; break; }
+			for (i = 0; i < count; ++i)
+				((int8*)conv)[i] = (int8)value[i];
+			ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);
+		}
+		else if (tif->tif_dir.td_bitspersample<=16)
+		{
+			int valid = 1;
+			for (i = 0; i < count; ++i) {
+				double dv = value[i];
+				if (!(dv == dv) || dv < -32768.0 || dv > 32767.0) { valid = 0; break; }
+			}
+			if (!valid) { ok = 0; break; }
+			for (i = 0; i < count; ++i)
+				((int16*)conv)[i] = (int16)value[i];
+			ok = TIFFWriteDirectoryTagSshortArray(tif,ndir,dir,tag,count,(int16*)conv);
+		}
+		else
+		{
+			int valid = 1;
+			for (i = 0; i < count; ++i) {
+				double dv = value[i];
+				if (!(dv == dv) || dv < -2147483648.0 || dv > 2147483647.0) { valid = 0; break; }
+			}
+			if (!valid) { ok = 0; break; }
+			for (i = 0; i < count; ++i)
+				((int32*)conv)[i] = (int32)value[i];
+			ok = TIFFWriteDirectoryTagSlongArray(tif,ndir,dir,tag,count,(int32*)conv);
+		}
+		break;
+	case SAMPLEFORMAT_UINT:
+		if (tif->tif_dir.td_bitspersample<=8)
+		{
+			int valid = 1;
+			for (i = 0; i < count; ++i) {
+				double dv = value[i];
+				if (!(dv == dv) || dv < 0.0 || dv > 255.0) { valid = 0; break; }
+			}
+			if (!valid) { ok = 0; break; }
+			for (i = 0; i < count; ++i)
+				((uint8*)conv)[i] = (uint8)value[i];
+			ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
+		}
+		else if (tif->tif_dir.td_bitspersample<=16)
+		{
+			int valid = 1;
+			for (i = 0; i < count; ++i) {
+				double dv = value[i];
+				if (!(dv == dv) || dv < 0.0 || dv > 65535.0) { valid = 0; break; }
+			}
+			if (!valid) { ok = 0; break; }
+			for (i = 0; i < count; ++i)
+				((uint16*)conv)[i] = (uint16)value[i];
+			ok = TIFFWriteDirectoryTagShortArray(tif,ndir,dir,tag,count,(uint16*)conv);
+		}
+		else
+		{
+			int valid = 1;
+			for (i = 0; i < count; ++i) {
+				double dv = value[i];
+				if (!(dv == dv) || dv < 0.0 || dv > 4294967295.0) { valid = 0; break; }
+			}
+			if (!valid) { ok = 0; break; }
+			for (i = 0; i < count; ++i)
+				((uint32*)conv)[i] = (uint32)value[i];
+			ok = TIFFWriteDirectoryTagLongArray(tif,ndir,dir,tag,count,(uint32*)conv);
+		}
+		break;
+	default:
+		ok = 0;
+}
+
 
 	_TIFFfree(conv);
 	return (ok);
