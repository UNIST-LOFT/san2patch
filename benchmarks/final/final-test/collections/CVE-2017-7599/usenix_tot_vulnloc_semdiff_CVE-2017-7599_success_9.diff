diff --git a/libtiff/tif_dirwrite.c b/libtiff/tif_dirwrite.c
index c9e871be..1910da72 100644
--- a/libtiff/tif_dirwrite.c
+++ b/libtiff/tif_dirwrite.c
@@ -953,63 +953,100 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 		return (0);
 	}
 
-	switch (tif->tif_dir.td_sampleformat)
-	{
-		case SAMPLEFORMAT_IEEEFP:
-			if (tif->tif_dir.td_bitspersample<=32)
-			{
-				for (i = 0; i < count; ++i)
-					((float*)conv)[i] = (float)value[i];
-				ok = TIFFWriteDirectoryTagFloatArray(tif,ndir,dir,tag,count,(float*)conv);
-			}
-			else
-			{
-				ok = TIFFWriteDirectoryTagDoubleArray(tif,ndir,dir,tag,count,value);
-			}
-			break;
-		case SAMPLEFORMAT_INT:
-			if (tif->tif_dir.td_bitspersample<=8)
-			{
-				for (i = 0; i < count; ++i)
-					((int8*)conv)[i] = (int8)value[i];
-				ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);
-			}
-			else if (tif->tif_dir.td_bitspersample<=16)
-			{
-				for (i = 0; i < count; ++i)
-					((int16*)conv)[i] = (int16)value[i];
-				ok = TIFFWriteDirectoryTagSshortArray(tif,ndir,dir,tag,count,(int16*)conv);
-			}
-			else
-			{
-				for (i = 0; i < count; ++i)
-					((int32*)conv)[i] = (int32)value[i];
-				ok = TIFFWriteDirectoryTagSlongArray(tif,ndir,dir,tag,count,(int32*)conv);
-			}
-			break;
-		case SAMPLEFORMAT_UINT:
-			if (tif->tif_dir.td_bitspersample<=8)
-			{
-				for (i = 0; i < count; ++i)
-					((uint8*)conv)[i] = (uint8)value[i];
-				ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
-			}
-			else if (tif->tif_dir.td_bitspersample<=16)
-			{
-				for (i = 0; i < count; ++i)
-					((uint16*)conv)[i] = (uint16)value[i];
-				ok = TIFFWriteDirectoryTagShortArray(tif,ndir,dir,tag,count,(uint16*)conv);
-			}
-			else
-			{
-				for (i = 0; i < count; ++i)
-					((uint32*)conv)[i] = (uint32)value[i];
-				ok = TIFFWriteDirectoryTagLongArray(tif,ndir,dir,tag,count,(uint32*)conv);
-			}
-			break;
-		default:
-			ok = 0;
-	}
+	/* Ensure required headers are available for numeric limits and classification. */
+#include <math.h>
+#include <float.h>
+#include <limits.h>
+#include <stdint.h>
+
+/*
+ * Rationale:
+ * Add range and special-value checks before narrowing conversions to avoid
+ * undefined behavior when casting out-of-range or non-finite double values
+ * into smaller integer or float types. If an invalid value is detected the
+ * conversion is aborted and the directory write is skipped so the write
+ * cannot proceed with invalid/nonsensical data.
+ */
+switch (tif->tif_dir.td_sampleformat)
+{
+    case SAMPLEFORMAT_IEEEFP:
+        if (tif->tif_dir.td_bitspersample <= 32)
+        {
+            for (i = 0; i < count; ++i) {
+                if (!isfinite(value[i]) || value[i] > FLT_MAX || value[i] < -FLT_MAX) { ok = 0; break; }
+                ((float*)conv)[i] = (float)value[i];
+            }
+            if (ok)
+                ok = TIFFWriteDirectoryTagFloatArray(tif, ndir, dir, tag, count, (float*)conv);
+        }
+        else
+        {
+            if (ok)
+                ok = TIFFWriteDirectoryTagDoubleArray(tif, ndir, dir, tag, count, value);
+        }
+        break;
+    case SAMPLEFORMAT_INT:
+        if (tif->tif_dir.td_bitspersample <= 8)
+        {
+            for (i = 0; i < count; ++i) {
+                if (!isfinite(value[i]) || value[i] < INT8_MIN || value[i] > INT8_MAX) { ok = 0; break; }
+                ((int8*)conv)[i] = (int8)value[i];
+            }
+            if (ok)
+                ok = TIFFWriteDirectoryTagSbyteArray(tif, ndir, dir, tag, count, (int8*)conv);
+        }
+        else if (tif->tif_dir.td_bitspersample <= 16)
+        {
+            for (i = 0; i < count; ++i) {
+                if (!isfinite(value[i]) || value[i] < INT16_MIN || value[i] > INT16_MAX) { ok = 0; break; }
+                ((int16*)conv)[i] = (int16)value[i];
+            }
+            if (ok)
+                ok = TIFFWriteDirectoryTagSshortArray(tif, ndir, dir, tag, count, (int16*)conv);
+        }
+        else
+        {
+            for (i = 0; i < count; ++i) {
+                if (!isfinite(value[i]) || value[i] < INT32_MIN || value[i] > INT32_MAX) { ok = 0; break; }
+                ((int32*)conv)[i] = (int32)value[i];
+            }
+            if (ok)
+                ok = TIFFWriteDirectoryTagSlongArray(tif, ndir, dir, tag, count, (int32*)conv);
+        }
+        break;
+    case SAMPLEFORMAT_UINT:
+        if (tif->tif_dir.td_bitspersample <= 8)
+        {
+            for (i = 0; i < count; ++i) {
+                if (!isfinite(value[i]) || value[i] < 0 || value[i] > UINT8_MAX) { ok = 0; break; }
+                ((uint8*)conv)[i] = (uint8)value[i];
+            }
+            if (ok)
+                ok = TIFFWriteDirectoryTagByteArray(tif, ndir, dir, tag, count, (uint8*)conv);
+        }
+        else if (tif->tif_dir.td_bitspersample <= 16)
+        {
+            for (i = 0; i < count; ++i) {
+                if (!isfinite(value[i]) || value[i] < 0 || value[i] > UINT16_MAX) { ok = 0; break; }
+                ((uint16*)conv)[i] = (uint16)value[i];
+            }
+            if (ok)
+                ok = TIFFWriteDirectoryTagShortArray(tif, ndir, dir, tag, count, (uint16*)conv);
+        }
+        else
+        {
+            for (i = 0; i < count; ++i) {
+                if (!isfinite(value[i]) || value[i] < 0 || value[i] > (double)UINT32_MAX) { ok = 0; break; }
+                ((uint32*)conv)[i] = (uint32)value[i];
+            }
+            if (ok)
+                ok = TIFFWriteDirectoryTagLongArray(tif, ndir, dir, tag, count, (uint32*)conv);
+        }
+        break;
+    default:
+        ok = 0;
+}
+
 
 	_TIFFfree(conv);
 	return (ok);
