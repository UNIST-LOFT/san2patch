diff --git a/libtiff/tif_dirwrite.c b/libtiff/tif_dirwrite.c
index c9e871be..715d69a2 100644
--- a/libtiff/tif_dirwrite.c
+++ b/libtiff/tif_dirwrite.c
@@ -989,10 +989,29 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 			break;
 		case SAMPLEFORMAT_UINT:
 			if (tif->tif_dir.td_bitspersample<=8)
+// FIXME: Crash CWE-681: Incorrect Conversion between Numeric Types
 			{
+				/*
+				 * Fix rationale:
+				 * The original code performed an unchecked cast from the source numeric
+				 * (value[i]) to uint8 which leads to implementation-defined/undefined
+				 * behavior when value[i] is outside the representable range [0,255].
+				 * To prevent incorrect conversion we validate each element is within
+				 * the allowed range before casting. If any element is out of range,
+				 * we fail gracefully by setting ok = 0 and avoiding any cast that
+				 * could produce invalid data.
+				 */
+				int valid = 1;
 				for (i = 0; i < count; ++i)
-					((uint8*)conv)[i] = (uint8)value[i];
-				ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
+				{
+					double v = value[i];
+					if (v < 0.0 || v > 255.0) { valid = 0; break; }
+					((uint8*)conv)[i] = (uint8)v;
+				}
+				if (valid)
+					ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
+				else
+					ok = 0;
 			}
 			else if (tif->tif_dir.td_bitspersample<=16)
 			{
@@ -1022,6 +1041,7 @@ TIFFWriteDirectoryTagSampleformatPerSample(TIFF* tif, uint32* ndir, TIFFDirEntry
 	switch (tif->tif_dir.td_sampleformat)
 	{
 		case SAMPLEFORMAT_IEEEFP:
+
 			if (tif->tif_dir.td_bitspersample<=32)
 				return(TIFFWriteDirectoryTagFloatPerSample(tif,ndir,dir,tag,(float)value));
 			else
