diff --git a/libtiff/tif_dirwrite.c b/libtiff/tif_dirwrite.c
index c9e871be..3524b9bc 100644
--- a/libtiff/tif_dirwrite.c
+++ b/libtiff/tif_dirwrite.c
@@ -955,6 +955,9 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 
 	switch (tif->tif_dir.td_sampleformat)
 	{
+		/* Rationale: Strict validation before narrowing casts. If any value
+		   cannot be represented in the destination integer width, fail-fast
+		   by returning 0 to avoid silent truncation/unsigned conversion. */
 		case SAMPLEFORMAT_IEEEFP:
 			if (tif->tif_dir.td_bitspersample<=32)
 			{
@@ -969,21 +972,34 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 			break;
 		case SAMPLEFORMAT_INT:
 			if (tif->tif_dir.td_bitspersample<=8)
-			{
+// FIXME: Crash CWE-681: Incorrect Conversion between Numeric Types (manifesting as CWE-197: Numeric Truncation Error and CWE-194: Unexpected Sign Extension)
+ 			{
 				for (i = 0; i < count; ++i)
+				{
+					if (value[i] < -128.0 || value[i] > 127.0)
+						return (0);
 					((int8*)conv)[i] = (int8)value[i];
+				}
 				ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);
 			}
 			else if (tif->tif_dir.td_bitspersample<=16)
 			{
 				for (i = 0; i < count; ++i)
+				{
+					if (value[i] < -32768.0 || value[i] > 32767.0)
+						return (0);
 					((int16*)conv)[i] = (int16)value[i];
+				}
 				ok = TIFFWriteDirectoryTagSshortArray(tif,ndir,dir,tag,count,(int16*)conv);
 			}
 			else
 			{
 				for (i = 0; i < count; ++i)
+				{
+					if (value[i] < -2147483648.0 || value[i] > 2147483647.0)
+						return (0);
 					((int32*)conv)[i] = (int32)value[i];
+				}
 				ok = TIFFWriteDirectoryTagSlongArray(tif,ndir,dir,tag,count,(int32*)conv);
 			}
 			break;
@@ -991,19 +1007,31 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 			if (tif->tif_dir.td_bitspersample<=8)
 			{
 				for (i = 0; i < count; ++i)
+				{
+					if (value[i] < 0.0 || value[i] > 255.0)
+						return (0);
 					((uint8*)conv)[i] = (uint8)value[i];
+				}
 				ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
 			}
 			else if (tif->tif_dir.td_bitspersample<=16)
 			{
 				for (i = 0; i < count; ++i)
+				{
+					if (value[i] < 0.0 || value[i] > 65535.0)
+						return (0);
 					((uint16*)conv)[i] = (uint16)value[i];
+				}
 				ok = TIFFWriteDirectoryTagShortArray(tif,ndir,dir,tag,count,(uint16*)conv);
 			}
 			else
 			{
 				for (i = 0; i < count; ++i)
+				{
+					if (value[i] < 0.0 || value[i] > 4294967295.0)
+						return (0);
 					((uint32*)conv)[i] = (uint32)value[i];
+				}
 				ok = TIFFWriteDirectoryTagLongArray(tif,ndir,dir,tag,count,(uint32*)conv);
 			}
 			break;
@@ -1011,6 +1039,7 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 			ok = 0;
 	}
 
+
 	_TIFFfree(conv);
 	return (ok);
 }
