diff --git a/libtiff/tif_dirwrite.c b/libtiff/tif_dirwrite.c
index c9e871be..33837e12 100644
--- a/libtiff/tif_dirwrite.c
+++ b/libtiff/tif_dirwrite.c
@@ -969,7 +969,12 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 			break;
 		case SAMPLEFORMAT_INT:
 			if (tif->tif_dir.td_bitspersample<=8)
-			{
+// Rationale: Pre-validate all values to ensure every element fits in signed 8-bit range
+// to prevent any narrowing conversion of out-of-range negatives/positives.
+ 			{
+				for (i = 0; i < count; ++i)
+					if (value[i] < -128.0 || value[i] > 127.0)
+						return (0);
 				for (i = 0; i < count; ++i)
 					((int8*)conv)[i] = (int8)value[i];
 				ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);
@@ -989,7 +994,12 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 			break;
 		case SAMPLEFORMAT_UINT:
 			if (tif->tif_dir.td_bitspersample<=8)
+// Rationale: Pre-validate unsigned 8-bit values to ensure no negative doubles are stored
+// into the unsigned byte buffer which would cause signed-to-unsigned conversion issues.
 			{
+				for (i = 0; i < count; ++i)
+					if (value[i] < 0.0 || value[i] > 255.0)
+						return (0);
 				for (i = 0; i < count; ++i)
 					((uint8*)conv)[i] = (uint8)value[i];
 				ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
@@ -1011,6 +1021,7 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 			ok = 0;
 	}
 
+
 	_TIFFfree(conv);
 	return (ok);
 }
