diff --git a/libtiff/tif_dirwrite.c b/libtiff/tif_dirwrite.c
index c9e871be..2683d5ab 100644
--- a/libtiff/tif_dirwrite.c
+++ b/libtiff/tif_dirwrite.c
@@ -969,7 +969,8 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 			break;
 		case SAMPLEFORMAT_INT:
 			if (tif->tif_dir.td_bitspersample<=8)
-			{
+// FIXME: Crash CWE-195: Signed to Unsigned Conversion Error
+ 			{
 				for (i = 0; i < count; ++i)
 					((int8*)conv)[i] = (int8)value[i];
 				ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);
@@ -990,9 +991,20 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 		case SAMPLEFORMAT_UINT:
 			if (tif->tif_dir.td_bitspersample<=8)
 			{
-				for (i = 0; i < count; ++i)
-					((uint8*)conv)[i] = (uint8)value[i];
-				ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
+				/* Rationale: Validate each value fits in unsigned 8-bit before narrowing/cast.
+				   This prevents negative values (e.g. -115) being converted to large
+				   unsigned bytes (CWE-195). On invalid input we log an error and fail. */
+				for (i = 0; i < count; ++i) {
+					long long v = (long long) value[i];
+					if (v < 0 || v > 255) {
+						TIFFErrorExt(tif->tif_clientdata, "TIFFWriteDirectoryTagSampleformatArray",
+						             "value[%d] = %lld out of range for BYTE tag (0..255)", i, v);
+						ok = 0; break;
+					}
+					((uint8*)conv)[i] = (uint8) v;
+				}
+				if (ok)
+					ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
 			}
 			else if (tif->tif_dir.td_bitspersample<=16)
 			{
@@ -1011,6 +1023,7 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 			ok = 0;
 	}
 
+
 	_TIFFfree(conv);
 	return (ok);
 }
