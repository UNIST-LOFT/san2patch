diff --git a/libtiff/tif_dirwrite.c b/libtiff/tif_dirwrite.c
index c9e871be..c91fc929 100644
--- a/libtiff/tif_dirwrite.c
+++ b/libtiff/tif_dirwrite.c
@@ -954,62 +954,77 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 	}
 
 	switch (tif->tif_dir.td_sampleformat)
-	{
-		case SAMPLEFORMAT_IEEEFP:
-			if (tif->tif_dir.td_bitspersample<=32)
-			{
-				for (i = 0; i < count; ++i)
-					((float*)conv)[i] = (float)value[i];
-				ok = TIFFWriteDirectoryTagFloatArray(tif,ndir,dir,tag,count,(float*)conv);
-			}
-			else
-			{
-				ok = TIFFWriteDirectoryTagDoubleArray(tif,ndir,dir,tag,count,value);
-			}
-			break;
-		case SAMPLEFORMAT_INT:
-			if (tif->tif_dir.td_bitspersample<=8)
-			{
-				for (i = 0; i < count; ++i)
-					((int8*)conv)[i] = (int8)value[i];
-				ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);
-			}
-			else if (tif->tif_dir.td_bitspersample<=16)
-			{
-				for (i = 0; i < count; ++i)
-					((int16*)conv)[i] = (int16)value[i];
-				ok = TIFFWriteDirectoryTagSshortArray(tif,ndir,dir,tag,count,(int16*)conv);
-			}
-			else
+{
+	case SAMPLEFORMAT_IEEEFP:
+		if (tif->tif_dir.td_bitspersample<=32)
+		{
+			for (i = 0; i < count; ++i)
+				((float*)conv)[i] = (float)value[i];
+			ok = TIFFWriteDirectoryTagFloatArray(tif,ndir,dir,tag,count,(float*)conv);
+		}
+		else
+		{
+			ok = TIFFWriteDirectoryTagDoubleArray(tif,ndir,dir,tag,count,value);
+		}
+		break;
+	case SAMPLEFORMAT_INT:
+		if (tif->tif_dir.td_bitspersample<=8)
+// FIXME: Crash CWE-681: Incorrect Conversion between Numeric Types
+ 		{
+			for (i = 0; i < count; ++i)
+				((int8*)conv)[i] = (int8)value[i];
+			ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);
+		}
+		else if (tif->tif_dir.td_bitspersample<=16)
+		{
+			for (i = 0; i < count; ++i)
+				((int16*)conv)[i] = (int16)value[i];
+			ok = TIFFWriteDirectoryTagSshortArray(tif,ndir,dir,tag,count,(int16*)conv);
+		}
+		else
+		{
+			for (i = 0; i < count; ++i)
+				((int32*)conv)[i] = (int32)value[i];
+			ok = TIFFWriteDirectoryTagSlongArray(tif,ndir,dir,tag,count,(int32*)conv);
+		}
+		break;
+	case SAMPLEFORMAT_UINT:
+		if (tif->tif_dir.td_bitspersample<=8)
+		{
+			/* Validate range before narrowing conversion to unsigned 8-bit to avoid
+			   storing negative or too-large values into an 8-bit field (CWE-681). */
+			int range_ok = 1;
+			for (i = 0; i < count; ++i)
 			{
-				for (i = 0; i < count; ++i)
-					((int32*)conv)[i] = (int32)value[i];
-				ok = TIFFWriteDirectoryTagSlongArray(tif,ndir,dir,tag,count,(int32*)conv);
+				if (value[i] < 0 || value[i] > 255) {
+					TIFFErrorExt(tif->tif_clientdata, "TIFFWriteDirectoryTagSampleformatArray", "SampleFormat unsigned byte out of range");
+					range_ok = 0;
+					break;
+				}
+				((uint8*)conv)[i] = (uint8)value[i];
 			}
-			break;
-		case SAMPLEFORMAT_UINT:
-			if (tif->tif_dir.td_bitspersample<=8)
-			{
-				for (i = 0; i < count; ++i)
-					((uint8*)conv)[i] = (uint8)value[i];
+			if (range_ok)
 				ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
-			}
-			else if (tif->tif_dir.td_bitspersample<=16)
-			{
-				for (i = 0; i < count; ++i)
-					((uint16*)conv)[i] = (uint16)value[i];
-				ok = TIFFWriteDirectoryTagShortArray(tif,ndir,dir,tag,count,(uint16*)conv);
-			}
 			else
-			{
-				for (i = 0; i < count; ++i)
-					((uint32*)conv)[i] = (uint32)value[i];
-				ok = TIFFWriteDirectoryTagLongArray(tif,ndir,dir,tag,count,(uint32*)conv);
-			}
-			break;
-		default:
-			ok = 0;
-	}
+				ok = 0;
+		}
+		else if (tif->tif_dir.td_bitspersample<=16)
+		{
+			for (i = 0; i < count; ++i)
+				((uint16*)conv)[i] = (uint16)value[i];
+			ok = TIFFWriteDirectoryTagShortArray(tif,ndir,dir,tag,count,(uint16*)conv);
+		}
+		else
+		{
+			for (i = 0; i < count; ++i)
+				((uint32*)conv)[i] = (uint32)value[i];
+			ok = TIFFWriteDirectoryTagLongArray(tif,ndir,dir,tag,count,(uint32*)conv);
+		}
+		break;
+	default:
+		ok = 0;
+}
+
 
 	_TIFFfree(conv);
 	return (ok);
