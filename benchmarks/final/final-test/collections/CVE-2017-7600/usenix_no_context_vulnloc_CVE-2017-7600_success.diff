diff --git a/libtiff/tif_dirwrite.c b/libtiff/tif_dirwrite.c
index c9e871be..8a369b45 100644
--- a/libtiff/tif_dirwrite.c
+++ b/libtiff/tif_dirwrite.c
@@ -989,10 +989,26 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 			break;
 		case SAMPLEFORMAT_UINT:
 			if (tif->tif_dir.td_bitspersample<=8)
-			{
-				for (i = 0; i < count; ++i)
-					((uint8*)conv)[i] = (uint8)value[i];
-				ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
+// FIXME: Crash CWE-195: Signed to Unsigned Conversion Error
+ 			{
+				/* Rationale:
+				   Explicitly validate each value before narrowing conversion to uint8.
+				   This prevents signed-to-unsigned wrap-around (e.g. -115 -> 141) and avoids
+				   writing corrupted tag data. If any element is outside the representable
+				   range [0,255], we reject the array and do not perform the write.
+				*/
+				int valid = 1;
+				for (i = 0; i < count; ++i) {
+					if (value[i] < 0 || value[i] > 255) { valid = 0; break; }
+				}
+				if (valid) {
+					for (i = 0; i < count; ++i)
+						((uint8*)conv)[i] = (uint8)value[i];
+					ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
+				} else {
+					/* Out-of-range value detected: abort write to avoid corrupted TIFF data */
+					ok = 0;
+				}
 			}
 			else if (tif->tif_dir.td_bitspersample<=16)
 			{
@@ -1022,6 +1038,7 @@ TIFFWriteDirectoryTagSampleformatPerSample(TIFF* tif, uint32* ndir, TIFFDirEntry
 	switch (tif->tif_dir.td_sampleformat)
 	{
 		case SAMPLEFORMAT_IEEEFP:
+
 			if (tif->tif_dir.td_bitspersample<=32)
 				return(TIFFWriteDirectoryTagFloatPerSample(tif,ndir,dir,tag,(float)value));
 			else
