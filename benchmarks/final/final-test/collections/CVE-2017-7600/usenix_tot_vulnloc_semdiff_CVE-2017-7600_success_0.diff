diff --git a/libtiff/tif_dirwrite.c b/libtiff/tif_dirwrite.c
index c9e871be..24e132bf 100644
--- a/libtiff/tif_dirwrite.c
+++ b/libtiff/tif_dirwrite.c
@@ -955,6 +955,9 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 
 	switch (tif->tif_dir.td_sampleformat)
 	{
+		/* Rationale: Prevent undefined behavior by validating range before narrowing casts.
+		   For narrow integer target types (8/16/32-bit) ensure each double value fits into
+		   the destination range; fail fast (return 0) on any out-of-range element. */
 		case SAMPLEFORMAT_IEEEFP:
 			if (tif->tif_dir.td_bitspersample<=32)
 			{
@@ -969,41 +972,72 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 			break;
 		case SAMPLEFORMAT_INT:
 			if (tif->tif_dir.td_bitspersample<=8)
-			{
-				for (i = 0; i < count; ++i)
-					((int8*)conv)[i] = (int8)value[i];
+// FIXME: Crash CWE-681: Incorrect Conversion between Numeric Types (manifesting as CWE-195: Signed to Unsigned Conversion Error)
+ 			{
+				for (i = 0; i < count; ++i) {
+					double v = value[i];
+					/* int8 range: -128..127 */
+					if (v < -128.0 || v > 127.0)
+						return (0);
+					((int8*)conv)[i] = (int8)v;
+				}
 				ok = TIFFWriteDirectoryTagSbyteArray(tif,ndir,dir,tag,count,(int8*)conv);
 			}
 			else if (tif->tif_dir.td_bitspersample<=16)
 			{
-				for (i = 0; i < count; ++i)
-					((int16*)conv)[i] = (int16)value[i];
+				for (i = 0; i < count; ++i) {
+					double v = value[i];
+					/* int16 range: -32768..32767 */
+					if (v < -32768.0 || v > 32767.0)
+						return (0);
+					((int16*)conv)[i] = (int16)v;
+				}
 				ok = TIFFWriteDirectoryTagSshortArray(tif,ndir,dir,tag,count,(int16*)conv);
 			}
 			else
 			{
-				for (i = 0; i < count; ++i)
-					((int32*)conv)[i] = (int32)value[i];
+				for (i = 0; i < count; ++i) {
+					double v = value[i];
+					/* int32 range: -2147483648..2147483647 */
+					if (v < -2147483648.0 || v > 2147483647.0)
+						return (0);
+					((int32*)conv)[i] = (int32)v;
+				}
 				ok = TIFFWriteDirectoryTagSlongArray(tif,ndir,dir,tag,count,(int32*)conv);
 			}
 			break;
 		case SAMPLEFORMAT_UINT:
 			if (tif->tif_dir.td_bitspersample<=8)
 			{
-				for (i = 0; i < count; ++i)
-					((uint8*)conv)[i] = (uint8)value[i];
+				for (i = 0; i < count; ++i) {
+					double v = value[i];
+					/* uint8 range: 0..255 */
+					if (v < 0.0 || v > 255.0)
+						return (0);
+					((uint8*)conv)[i] = (uint8)v;
+				}
 				ok = TIFFWriteDirectoryTagByteArray(tif,ndir,dir,tag,count,(uint8*)conv);
 			}
 			else if (tif->tif_dir.td_bitspersample<=16)
 			{
-				for (i = 0; i < count; ++i)
-					((uint16*)conv)[i] = (uint16)value[i];
+				for (i = 0; i < count; ++i) {
+					double v = value[i];
+					/* uint16 range: 0..65535 */
+					if (v < 0.0 || v > 65535.0)
+						return (0);
+					((uint16*)conv)[i] = (uint16)v;
+				}
 				ok = TIFFWriteDirectoryTagShortArray(tif,ndir,dir,tag,count,(uint16*)conv);
 			}
 			else
 			{
-				for (i = 0; i < count; ++i)
-					((uint32*)conv)[i] = (uint32)value[i];
+				for (i = 0; i < count; ++i) {
+					double v = value[i];
+					/* uint32 range: 0..4294967295 */
+					if (v < 0.0 || v > 4294967295.0)
+						return (0);
+					((uint32*)conv)[i] = (uint32)v;
+				}
 				ok = TIFFWriteDirectoryTagLongArray(tif,ndir,dir,tag,count,(uint32*)conv);
 			}
 			break;
@@ -1011,6 +1045,7 @@ TIFFWriteDirectoryTagSampleformatArray(TIFF* tif, uint32* ndir, TIFFDirEntry* di
 			ok = 0;
 	}
 
+
 	_TIFFfree(conv);
 	return (ok);
 }
