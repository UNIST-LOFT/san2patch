diff --git a/bfd/dwarf2.c b/bfd/dwarf2.c
index 89a3f9b1830..f4568b89041 100644
--- a/bfd/dwarf2.c
+++ b/bfd/dwarf2.c
@@ -2428,25 +2428,47 @@ decode_line_info (struct comp_unit *unit, struct dwarf2_debug *stash)
 	      }
 	    case DW_LNS_set_column:
 	      column = _bfd_safe_read_leb128 (abfd, line_ptr, &bytes_read,
-					      FALSE, line_end);
+				      FALSE, line_end);
 	      line_ptr += bytes_read;
 	      break;
 	    case DW_LNS_negate_stmt:
 	      is_stmt = (!is_stmt);
 	      break;
 	    case DW_LNS_set_basic_block:
-	      break;
+	// FIXME: Crash CWE-369: Divide By Zero
+ 	      break;
 	    case DW_LNS_const_add_pc:
+	      /* Rationale: Ensure we never divide by zero using values from the
+	         malformed DWARF stream. If line_range is zero, skip special
+	         opcode handling as a conservative fail-safe. If
+	         maximum_ops_per_insn is zero, avoid division/modulo by treating
+	         op_index as 0 (conservative fallback). */
+	      if (lh.line_range == 0)
+		{
+		  /* Malformed DWARF: avoid divide by zero. Conservatively skip
+		     special opcode handling. */
+		  break;
+		}
 	      if (lh.maximum_ops_per_insn == 1)
 		address += (lh.minimum_instruction_length
 			    * ((255 - lh.opcode_base) / lh.line_range));
 	      else
 		{
 		  bfd_vma adjust = ((255 - lh.opcode_base) / lh.line_range);
-		  address += (lh.minimum_instruction_length
-			      * ((op_index + adjust)
-				 / lh.maximum_ops_per_insn));
-		  op_index = (op_index + adjust) % lh.maximum_ops_per_insn;
+		  if (lh.maximum_ops_per_insn == 0)
+		    {
+		      /* Malformed: avoid division/modulo by zero. Treat op_index
+			 as zero for conservative behavior. */
+		      address += (lh.minimum_instruction_length * adjust);
+		      op_index = 0;
+		    }
+		  else
+		    {
+		      address += (lh.minimum_instruction_length
+				  * ((op_index + adjust)
+			     / lh.maximum_ops_per_insn));
+		      op_index = (op_index + adjust) % lh.maximum_ops_per_insn;
+		    }
 		}
 	      break;
 	    case DW_LNS_fixed_advance_pc:
