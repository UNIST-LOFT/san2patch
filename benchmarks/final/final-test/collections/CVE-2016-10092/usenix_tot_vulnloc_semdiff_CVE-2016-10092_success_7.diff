diff --git a/tools/tiffcrop.c b/tools/tiffcrop.c
index b87a77a8..9d7cb498 100644
--- a/tools/tiffcrop.c
+++ b/tools/tiffcrop.c
@@ -3672,37 +3672,66 @@ extractContigSamplesToTileBuffer(uint8 *out, uint8 *in, uint32 rows, uint32 cols
 
 static int readContigStripsIntoBuffer (TIFF* in, uint8* buf)
 {
-        uint8* bufp = buf;
-        int32  bytes_read = 0;
-        uint32 strip, nstrips   = TIFFNumberOfStrips(in);
-        uint32 stripsize = TIFFStripSize(in);
-        uint32 rows = 0;
-        uint32 rps = TIFFGetFieldDefaulted(in, TIFFTAG_ROWSPERSTRIP, &rps);
-        tsize_t scanline_size = TIFFScanlineSize(in);
-
-        if (scanline_size == 0) {
-                TIFFError("", "TIFF scanline size is zero!");    
-                return 0;
-        }
+		uint8* bufp = buf;
+		int32  bytes_read = 0;
+		uint32 strip, nstrips   = TIFFNumberOfStrips(in);
+		uint32 stripsize = TIFFStripSize(in);
+		uint32 rows = 0;
+		uint32 rps = TIFFGetFieldDefaulted(in, TIFFTAG_ROWSPERSTRIP, &rps);
+		tsize_t scanline_size = TIFFScanlineSize(in);
+
+		/* Rationale: compute total expected bytes and guard against overflow
+		   so we can bound each strip read. If multiplication overflows,
+		   fail safely rather than allow unchecked copies. */
+		size_t total_expected = (size_t)stripsize * (size_t)nstrips;
+		if (nstrips != 0 && stripsize != 0 && total_expected / (size_t)nstrips != (size_t)stripsize) {
+			TIFFError("", "Integer overflow calculating total strip size");
+			return 0;
+		}
 
-        for (strip = 0; strip < nstrips; strip++) {
-                bytes_read = TIFFReadEncodedStrip (in, strip, bufp, -1);
-                rows = bytes_read / scanline_size;
-                if ((strip < (nstrips - 1)) && (bytes_read != (int32)stripsize))
-                        TIFFError("", "Strip %d: read %lu bytes, strip size %lu",
-                                  (int)strip + 1, (unsigned long) bytes_read,
-                                  (unsigned long)stripsize);
-
-                if (bytes_read < 0 && !ignore) {
-                        TIFFError("", "Error reading strip %lu after %lu rows",
-                                  (unsigned long) strip, (unsigned long)rows);
-                        return 0;
-                }
-                bufp += bytes_read;
-        }
+		if (scanline_size == 0) {
+			TIFFError("", "TIFF scanline size is zero!");    
+			return 0;
+		}
 
-        return 1;
-} /* end readContigStripsIntoBuffer */
+		for (strip = 0; strip < nstrips; strip++) {
+			/* remaining bytes available in destination buffer */
+			size_t written = (size_t)(bufp - buf);
+			if (written >= total_expected) {
+				TIFFError("", "Destination buffer full before reading strip %lu", (unsigned long)strip);
+				return 0;
+			}
+			size_t remaining = total_expected - written;
+			/* Limit read length to remaining bytes; clamp to a safe signed tsize_t value */
+			tsize_t toread = (remaining > (size_t)0x7fffffff) ? (tsize_t)0x7fffffff : (tsize_t)remaining;
+
+			bytes_read = TIFFReadEncodedStrip (in, strip, bufp, toread);
+			rows = bytes_read / scanline_size;
+			if ((strip < (nstrips - 1)) && (bytes_read != (int32)stripsize))
+				TIFFError("", "Strip %d: read %lu bytes, strip size %lu",
+					  (int)strip + 1, (unsigned long) bytes_read,
+					  (unsigned long)stripsize);
+
+			if (bytes_read < 0 && !ignore) {
+				TIFFError("", "Error reading strip %lu after %lu rows",
+					  (unsigned long) strip, (unsigned long)rows);
+				/* FIXME: Crash CWE-787: Out-of-bounds Write */
+				return 0;
+			}
+
+			/* Ensure the strip did not write more than we allowed. */
+			if ((size_t)bytes_read > remaining) {
+				TIFFError("", "Strip %lu attempted to write %lu bytes beyond buffer (allowed %lu)",
+					  (unsigned long)strip, (unsigned long)bytes_read, (unsigned long)remaining);
+				return 0;
+			}
+
+			bufp += bytes_read;
+		}
+
+		return 1;
+}
+ /* end readContigStripsIntoBuffer */
 
 static int 
 combineSeparateSamplesBytes (unsigned char *srcbuffs[], unsigned char *out,
