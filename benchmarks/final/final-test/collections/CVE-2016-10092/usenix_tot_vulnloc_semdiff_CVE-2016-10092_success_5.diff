diff --git a/tools/tiffcrop.c b/tools/tiffcrop.c
index b87a77a8..74a79cac 100644
--- a/tools/tiffcrop.c
+++ b/tools/tiffcrop.c
@@ -3672,37 +3672,73 @@ extractContigSamplesToTileBuffer(uint8 *out, uint8 *in, uint32 rows, uint32 cols
 
 static int readContigStripsIntoBuffer (TIFF* in, uint8* buf)
 {
-        uint8* bufp = buf;
-        int32  bytes_read = 0;
-        uint32 strip, nstrips   = TIFFNumberOfStrips(in);
-        uint32 stripsize = TIFFStripSize(in);
-        uint32 rows = 0;
-        uint32 rps = TIFFGetFieldDefaulted(in, TIFFTAG_ROWSPERSTRIP, &rps);
-        tsize_t scanline_size = TIFFScanlineSize(in);
-
-        if (scanline_size == 0) {
-                TIFFError("", "TIFF scanline size is zero!");    
-                return 0;
-        }
+	/* Rationale: Prevent out-of-bounds writes by capping each TIFFReadEncodedStrip
+	 * call to the remaining bytes available in the destination buffer. Compute
+	 * the total expected buffer size as stripsize * nstrips using size_t and
+	 * detect multiplication overflow. Check returned bytes_read against the
+	 * remaining bytes and refuse to continue if it would exceed the buffer.
+	 */
+	uint8* bufp = buf;
+	int32  bytes_read = 0;
+	uint32 strip, nstrips   = TIFFNumberOfStrips(in);
+	uint32 stripsize = TIFFStripSize(in);
+	uint32 rows = 0;
+	uint32 rps = TIFFGetFieldDefaulted(in, TIFFTAG_ROWSPERSTRIP, &rps);
+	tsize_t scanline_size = TIFFScanlineSize(in);
+	size_t remaining_bytes = 0;
+	size_t total_size = 0;
+
+	if (scanline_size == 0) {
+		TIFFError("", "TIFF scanline size is zero!");    
+		return 0;
+	}
 
-        for (strip = 0; strip < nstrips; strip++) {
-                bytes_read = TIFFReadEncodedStrip (in, strip, bufp, -1);
-                rows = bytes_read / scanline_size;
-                if ((strip < (nstrips - 1)) && (bytes_read != (int32)stripsize))
-                        TIFFError("", "Strip %d: read %lu bytes, strip size %lu",
-                                  (int)strip + 1, (unsigned long) bytes_read,
-                                  (unsigned long)stripsize);
-
-                if (bytes_read < 0 && !ignore) {
-                        TIFFError("", "Error reading strip %lu after %lu rows",
-                                  (unsigned long) strip, (unsigned long)rows);
-                        return 0;
-                }
-                bufp += bytes_read;
-        }
+	/* Compute total buffer size and check for overflow */
+	if (stripsize != 0) {
+		/* use size_t for multiplication and check overflow */
+		total_size = (size_t)stripsize * (size_t)nstrips;
+		if (total_size / (size_t)stripsize != (size_t)nstrips) {
+			TIFFError("", "Integer overflow computing buffer size");
+			return 0;
+		}
+		remaining_bytes = total_size;
+	} else {
+		/* If stripsize is zero, nothing to do */
+		return 1;
+	}
 
-        return 1;
-} /* end readContigStripsIntoBuffer */
+	for (strip = 0; strip < nstrips; strip++) {
+		/* Limit read to remaining bytes to avoid writing past allocated buffer */
+		bytes_read = TIFFReadEncodedStrip (in, strip, bufp, (tsize_t)remaining_bytes);
+		if (bytes_read > 0)
+			rows = bytes_read / scanline_size;
+		if ((strip < (nstrips - 1)) && (bytes_read != (int32)stripsize))
+			TIFFError("", "Strip %d: read %lu bytes, strip size %lu",
+				  (int)strip + 1, (unsigned long) bytes_read,
+				  (unsigned long)stripsize);
+
+		if (bytes_read < 0 && !ignore) {
+			TIFFError("", "Error reading strip %lu after %lu rows",
+				  (unsigned long) strip, (unsigned long)rows);
+			/* FIXME: Crash CWE-787: Out-of-bounds Write */
+			return 0;
+		}
+
+		/* Bounds check: ensure the read did not exceed remaining bytes */
+		if (bytes_read < 0 || (size_t)bytes_read > remaining_bytes) {
+			TIFFError("", "Strip %d: read %lu bytes exceeds remaining buffer (%lu)",
+				  (int)strip + 1, (unsigned long)bytes_read,
+				  (unsigned long)remaining_bytes);
+			return 0;
+		}
+
+		bufp += bytes_read;
+		remaining_bytes -= (size_t)bytes_read;
+	}
+
+	return 1;
+}
+ /* end readContigStripsIntoBuffer */
 
 static int 
 combineSeparateSamplesBytes (unsigned char *srcbuffs[], unsigned char *out,
