diff --git a/tools/tiffcrop.c b/tools/tiffcrop.c
index b87a77a8..994b6dab 100644
--- a/tools/tiffcrop.c
+++ b/tools/tiffcrop.c
@@ -3672,37 +3672,62 @@ extractContigSamplesToTileBuffer(uint8 *out, uint8 *in, uint32 rows, uint32 cols
 
 static int readContigStripsIntoBuffer (TIFF* in, uint8* buf)
 {
-        uint8* bufp = buf;
-        int32  bytes_read = 0;
-        uint32 strip, nstrips   = TIFFNumberOfStrips(in);
-        uint32 stripsize = TIFFStripSize(in);
-        uint32 rows = 0;
-        uint32 rps = TIFFGetFieldDefaulted(in, TIFFTAG_ROWSPERSTRIP, &rps);
-        tsize_t scanline_size = TIFFScanlineSize(in);
-
-        if (scanline_size == 0) {
-                TIFFError("", "TIFF scanline size is zero!");    
-                return 0;
-        }
+	uint8* bufp = buf;
+	int32  bytes_read = 0;
+	uint32 strip, nstrips   = TIFFNumberOfStrips(in);
+	uint32 stripsize = TIFFStripSize(in);
+	uint32 rows = 0;
+	uint32 rps = TIFFGetFieldDefaulted(in, TIFFTAG_ROWSPERSTRIP, &rps);
+	tsize_t scanline_size = TIFFScanlineSize(in);
+
+	if (scanline_size == 0) {
+		TIFFError("", "TIFF scanline size is zero!");    
+		return 0;
+	}
 
-        for (strip = 0; strip < nstrips; strip++) {
-                bytes_read = TIFFReadEncodedStrip (in, strip, bufp, -1);
-                rows = bytes_read / scanline_size;
-                if ((strip < (nstrips - 1)) && (bytes_read != (int32)stripsize))
-                        TIFFError("", "Strip %d: read %lu bytes, strip size %lu",
-                                  (int)strip + 1, (unsigned long) bytes_read,
-                                  (unsigned long)stripsize);
-
-                if (bytes_read < 0 && !ignore) {
-                        TIFFError("", "Error reading strip %lu after %lu rows",
-                                  (unsigned long) strip, (unsigned long)rows);
-                        return 0;
-                }
-                bufp += bytes_read;
-        }
+	/* Rationale: compute the maximum number of bytes that can be written into
+	   the provided buffer (nstrips * stripsize) using checked arithmetic.
+	   Before each call to TIFFReadEncodedStrip, limit the requested read to
+	   the remaining space to prevent the strip reader from writing past the
+	   end of the provided buffer (fixes possible one-byte OOB write). */
+	{
+		size_t max_total;
+		/* detect multiplication overflow: (size_t)nstrips * (size_t)stripsize */
+		if ((size_t)stripsize != 0 && (size_t)nstrips > ((size_t)-1) / (size_t)stripsize) {
+			TIFFError("", "Requested image size is too large");
+			return 0;
+		}
+		max_total = (size_t)nstrips * (size_t)stripsize;
 
-        return 1;
-} /* end readContigStripsIntoBuffer */
+		for (strip = 0; strip < nstrips; strip++) {
+			size_t used = (size_t)(bufp - buf);
+			if (used >= max_total) {
+				TIFFError("", "Buffer too small for strip data (strip %lu)", (unsigned long)strip);
+				return 0;
+			}
+			/* only allow reading up to the remaining space in the buffer */
+			tsize_t remaining = (tsize_t)(max_total - used);
+
+			bytes_read = TIFFReadEncodedStrip (in, strip, bufp, remaining);
+			rows = bytes_read / scanline_size;
+			if ((strip < (nstrips - 1)) && (bytes_read != (int32)stripsize))
+				TIFFError("", "Strip %d: read %lu bytes, strip size %lu",
+					  (int)strip + 1, (unsigned long) bytes_read,
+					  (unsigned long)stripsize);
+
+			if (bytes_read < 0 && !ignore) {
+				TIFFError("", "Error reading strip %lu after %lu rows",
+					  (unsigned long) strip, (unsigned long)rows);
+				// FIXME: Crash CWE-787: Out-of-bounds Write
+				 return 0;
+			}
+			bufp += bytes_read;
+		}
+	}
+
+	return 1;
+}
+ /* end readContigStripsIntoBuffer */
 
 static int 
 combineSeparateSamplesBytes (unsigned char *srcbuffs[], unsigned char *out,
