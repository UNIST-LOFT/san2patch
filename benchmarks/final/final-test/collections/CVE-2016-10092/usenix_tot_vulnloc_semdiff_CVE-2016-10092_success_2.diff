diff --git a/tools/tiffcrop.c b/tools/tiffcrop.c
index b87a77a8..b06e225a 100644
--- a/tools/tiffcrop.c
+++ b/tools/tiffcrop.c
@@ -3672,37 +3672,43 @@ extractContigSamplesToTileBuffer(uint8 *out, uint8 *in, uint32 rows, uint32 cols
 
 static int readContigStripsIntoBuffer (TIFF* in, uint8* buf)
 {
-        uint8* bufp = buf;
-        int32  bytes_read = 0;
-        uint32 strip, nstrips   = TIFFNumberOfStrips(in);
-        uint32 stripsize = TIFFStripSize(in);
-        uint32 rows = 0;
-        uint32 rps = TIFFGetFieldDefaulted(in, TIFFTAG_ROWSPERSTRIP, &rps);
-        tsize_t scanline_size = TIFFScanlineSize(in);
-
-        if (scanline_size == 0) {
-                TIFFError("", "TIFF scanline size is zero!");    
-                return 0;
-        }
+		uint8* bufp = buf;
+		int32  bytes_read = 0;
+		uint32 strip, nstrips   = TIFFNumberOfStrips(in);
+		uint32 stripsize = TIFFStripSize(in);
+		uint32 rows = 0;
+		uint32 rps = TIFFGetFieldDefaulted(in, TIFFTAG_ROWSPERSTRIP, &rps);
+		tsize_t scanline_size = TIFFScanlineSize(in);
+
+		if (scanline_size == 0) {
+				TIFFError("", "TIFF scanline size is zero!");    
+				return 0;
+		}
 
-        for (strip = 0; strip < nstrips; strip++) {
-                bytes_read = TIFFReadEncodedStrip (in, strip, bufp, -1);
-                rows = bytes_read / scanline_size;
-                if ((strip < (nstrips - 1)) && (bytes_read != (int32)stripsize))
-                        TIFFError("", "Strip %d: read %lu bytes, strip size %lu",
-                                  (int)strip + 1, (unsigned long) bytes_read,
-                                  (unsigned long)stripsize);
-
-                if (bytes_read < 0 && !ignore) {
-                        TIFFError("", "Error reading strip %lu after %lu rows",
-                                  (unsigned long) strip, (unsigned long)rows);
-                        return 0;
-                }
-                bufp += bytes_read;
-        }
+		for (strip = 0; strip < nstrips; strip++) {
+				bytes_read = TIFFReadEncodedStrip (in, strip, bufp, -1);
+
+				/* Rationale: Prevent bufp from being decremented when bytes_read < 0.
+				   Only advance bufp on positive bytes_read to avoid buffer underflow (CWE-787).
+				*/
+				if (bytes_read > 0) {
+						rows = bytes_read / scanline_size;
+						if ((strip < (nstrips - 1)) && (bytes_read != (int32)stripsize))
+							TIFFError("", "Strip %d: read %lu bytes, strip size %lu",
+									  (int)strip + 1, (unsigned long) bytes_read,
+									  (unsigned long)stripsize);
+						bufp += bytes_read;
+				} else if (bytes_read < 0 && !ignore) {
+						TIFFError("", "Error reading strip %lu after %lu rows",
+								  (unsigned long) strip, (unsigned long)rows);
+						return 0;
+				}
+				/* if bytes_read == 0 or (bytes_read < 0 && ignore) do not advance bufp */
+		}
 
-        return 1;
-} /* end readContigStripsIntoBuffer */
+		return 1;
+}
+ /* end readContigStripsIntoBuffer */
 
 static int 
 combineSeparateSamplesBytes (unsigned char *srcbuffs[], unsigned char *out,
