diff --git a/tools/tiffcrop.c b/tools/tiffcrop.c
index b87a77a8..35f8927a 100644
--- a/tools/tiffcrop.c
+++ b/tools/tiffcrop.c
@@ -3672,37 +3672,74 @@ extractContigSamplesToTileBuffer(uint8 *out, uint8 *in, uint32 rows, uint32 cols
 
 static int readContigStripsIntoBuffer (TIFF* in, uint8* buf)
 {
-        uint8* bufp = buf;
-        int32  bytes_read = 0;
-        uint32 strip, nstrips   = TIFFNumberOfStrips(in);
-        uint32 stripsize = TIFFStripSize(in);
-        uint32 rows = 0;
-        uint32 rps = TIFFGetFieldDefaulted(in, TIFFTAG_ROWSPERSTRIP, &rps);
-        tsize_t scanline_size = TIFFScanlineSize(in);
-
-        if (scanline_size == 0) {
-                TIFFError("", "TIFF scanline size is zero!");    
-                return 0;
-        }
+	uint8* bufp = buf;
+	int32  bytes_read = 0;
+	uint32 strip, nstrips   = TIFFNumberOfStrips(in);
+	uint32 stripsize = TIFFStripSize(in);
+	uint32 rows = 0;
+	uint32 rps = TIFFGetFieldDefaulted(in, TIFFTAG_ROWSPERSTRIP, &rps);
+	tsize_t scanline_size = TIFFScanlineSize(in);
+
+	if (scanline_size == 0) {
+		TIFFError("", "TIFF scanline size is zero!");    
+		return 0;
+	}
 
-        for (strip = 0; strip < nstrips; strip++) {
-                bytes_read = TIFFReadEncodedStrip (in, strip, bufp, -1);
-                rows = bytes_read / scanline_size;
-                if ((strip < (nstrips - 1)) && (bytes_read != (int32)stripsize))
-                        TIFFError("", "Strip %d: read %lu bytes, strip size %lu",
-                                  (int)strip + 1, (unsigned long) bytes_read,
-                                  (unsigned long)stripsize);
-
-                if (bytes_read < 0 && !ignore) {
-                        TIFFError("", "Error reading strip %lu after %lu rows",
-                                  (unsigned long) strip, (unsigned long)rows);
-                        return 0;
-                }
-                bufp += bytes_read;
-        }
+	/* Rationale: Compute the expected total buffer size and track a base pointer
+	   so we can validate each strip read does not exceed the allocated buffer.
+	   Use (size_t)-1 to detect multiplication overflow. */
+	{
+		size_t expected_total = 0;
+		uint8* base_buf = buf;
+		if (nstrips != 0) {
+			if ((size_t)stripsize > ((size_t)-1) / (size_t)nstrips) {
+				TIFFError("", "Strip size overflow while computing buffer size");
+				return 0;
+			}
+			expected_total = (size_t)nstrips * (size_t)stripsize;
+		}
 
-        return 1;
-} /* end readContigStripsIntoBuffer */
+		for (strip = 0; strip < nstrips; strip++) {
+			bytes_read = TIFFReadEncodedStrip (in, strip, bufp, -1);
+
+			/* Handle negative read results before doing any pointer arithmetic. */
+			if (bytes_read < 0) {
+				if (!ignore) {
+					TIFFError("", "Error reading strip %lu",
+						(unsigned long) strip);
+					return 0;
+				} else {
+					/* If errors are ignored, skip advancing the buffer to avoid underflow. */
+					TIFFError("", "Non-fatal error reading strip %lu (ignored)",
+						(unsigned long) strip);
+					continue;
+				}
+			}
+
+			/* Now it's safe to compute rows and check expected strip size. */
+			rows = bytes_read / scanline_size;
+			if ((strip < (nstrips - 1)) && (bytes_read != (int32)stripsize))
+				TIFFError("", "Strip %d: read %lu bytes, strip size %lu",
+					(int)strip + 1, (unsigned long) bytes_read,
+					(unsigned long)stripsize);
+
+			/* Validate that the bytes_read will fit into the remaining buffer. */
+			{
+				size_t consumed = (size_t)(bufp - base_buf);
+				size_t remaining = expected_total > consumed ? expected_total - consumed : 0;
+				if ((size_t)bytes_read > remaining) {
+					TIFFError("", "Strip %lu would overflow destination buffer", (unsigned long)strip);
+					return 0;
+				}
+			}
+
+			bufp += bytes_read;
+		}
+	}
+
+	return 1;
+}
+ /* end readContigStripsIntoBuffer */
 
 static int 
 combineSeparateSamplesBytes (unsigned char *srcbuffs[], unsigned char *out,
