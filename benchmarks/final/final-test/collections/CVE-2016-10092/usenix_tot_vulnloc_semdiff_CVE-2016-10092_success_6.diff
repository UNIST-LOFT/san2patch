diff --git a/tools/tiffcrop.c b/tools/tiffcrop.c
index b87a77a8..678307cc 100644
--- a/tools/tiffcrop.c
+++ b/tools/tiffcrop.c
@@ -3672,37 +3672,52 @@ extractContigSamplesToTileBuffer(uint8 *out, uint8 *in, uint32 rows, uint32 cols
 
 static int readContigStripsIntoBuffer (TIFF* in, uint8* buf)
 {
-        uint8* bufp = buf;
-        int32  bytes_read = 0;
-        uint32 strip, nstrips   = TIFFNumberOfStrips(in);
-        uint32 stripsize = TIFFStripSize(in);
-        uint32 rows = 0;
-        uint32 rps = TIFFGetFieldDefaulted(in, TIFFTAG_ROWSPERSTRIP, &rps);
-        tsize_t scanline_size = TIFFScanlineSize(in);
-
-        if (scanline_size == 0) {
-                TIFFError("", "TIFF scanline size is zero!");    
-                return 0;
-        }
+	/* Rationale: Prevent bufp from being decremented when TIFFReadEncodedStrip
+	   returns a negative bytes_read. Handle negative bytes_read before computing
+	   rows and before modifying bufp; if ignore==true, treat bytes_read as 0. */
+	uint8* bufp = buf;
+	int32  bytes_read = 0;
+	uint32 strip, nstrips   = TIFFNumberOfStrips(in);
+	uint32 stripsize = TIFFStripSize(in);
+	uint32 rows = 0;
+	uint32 rps = TIFFGetFieldDefaulted(in, TIFFTAG_ROWSPERSTRIP, &rps);
+	tsize_t scanline_size = TIFFScanlineSize(in);
+
+	if (scanline_size == 0) {
+		TIFFError("", "TIFF scanline size is zero!");    
+		return 0;
+	}
 
-        for (strip = 0; strip < nstrips; strip++) {
-                bytes_read = TIFFReadEncodedStrip (in, strip, bufp, -1);
-                rows = bytes_read / scanline_size;
-                if ((strip < (nstrips - 1)) && (bytes_read != (int32)stripsize))
-                        TIFFError("", "Strip %d: read %lu bytes, strip size %lu",
-                                  (int)strip + 1, (unsigned long) bytes_read,
-                                  (unsigned long)stripsize);
-
-                if (bytes_read < 0 && !ignore) {
-                        TIFFError("", "Error reading strip %lu after %lu rows",
-                                  (unsigned long) strip, (unsigned long)rows);
-                        return 0;
-                }
-                bufp += bytes_read;
-        }
+	for (strip = 0; strip < nstrips; strip++) {
+		bytes_read = TIFFReadEncodedStrip (in, strip, bufp, -1);
+
+		/* Handle errors immediately to avoid using negative bytes_read in
+		   subsequent arithmetic (rows calculation, bufp increment). */
+		if (bytes_read < 0) {
+			if (!ignore) {
+				/* Report zero rows for the error context to avoid underflow */
+				rows = 0;
+				TIFFError("", "Error reading strip %lu after %lu rows",
+					  (unsigned long) strip, (unsigned long)rows);
+				return 0;
+			} else {
+				/* Ignore the error: treat as zero bytes read so we don't move bufp */
+				bytes_read = 0;
+			}
+		}
 
-        return 1;
-} /* end readContigStripsIntoBuffer */
+		rows = bytes_read / scanline_size;
+		if ((strip < (nstrips - 1)) && (bytes_read != (int32)stripsize))
+			TIFFError("", "Strip %d: read %lu bytes, strip size %lu",
+				  (int)strip + 1, (unsigned long) bytes_read,
+				  (unsigned long)stripsize);
+
+		bufp += bytes_read;
+	}
+
+	return 1;
+}
+ /* end readContigStripsIntoBuffer */
 
 static int 
 combineSeparateSamplesBytes (unsigned char *srcbuffs[], unsigned char *out,
