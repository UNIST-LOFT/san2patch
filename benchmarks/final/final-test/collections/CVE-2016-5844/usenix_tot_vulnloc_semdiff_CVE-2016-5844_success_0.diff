diff --git a/libarchive/archive_read_support_format_iso9660.c b/libarchive/archive_read_support_format_iso9660.c
index 6934ceef..13b075ee 100644
--- a/libarchive/archive_read_support_format_iso9660.c
+++ b/libarchive/archive_read_support_format_iso9660.c
@@ -1089,9 +1089,29 @@ choose_volume(struct archive_read *a, struct iso9660 *iso9660)
 	if (iso9660->seenJoliet &&
 		vd->location > iso9660->joliet.location)
 		/* This condition is unlikely; by way of caution. */
-		vd = &(iso9660->joliet);
+// FIXME: Crash CWE-125: Out-of-bounds Read
+ 		vd = &(iso9660->joliet);
 
-	skipsize = LOGICAL_BLOCK_SIZE * vd->location;
+	/*
+	 * Compute skip size using a wide unsigned type and check for overflow
+	 * before casting back to signed int64_t for __archive_read_consume.
+	 */
+	{
+		uint64_t raw_location = (uint64_t)vd->location;
+		if (raw_location > (UINT64_MAX / (uint64_t)LOGICAL_BLOCK_SIZE)) {
+			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
+			    "iso9660: volume location overflow or out of range");
+			return (ARCHIVE_FATAL);
+		}
+		uint64_t skipsize64 = raw_location * (uint64_t)LOGICAL_BLOCK_SIZE;
+		/* Ensure the result fits into signed int64_t expected by reader. */
+		if (skipsize64 > (uint64_t)INT64_MAX) {
+			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
+			    "iso9660: volume location overflow or out of range");
+			return (ARCHIVE_FATAL);
+		}
+		skipsize = (int64_t)skipsize64;
+	}
 	skipsize = __archive_read_consume(a, skipsize);
 	if (skipsize < 0)
 		return ((int)skipsize);
@@ -1129,8 +1149,35 @@ choose_volume(struct archive_read *a, struct iso9660 *iso9660)
 	    && iso9660->seenJoliet) {
 		/* Switch reading data from primary to joliet. */
 		vd = &(iso9660->joliet);
-		skipsize = LOGICAL_BLOCK_SIZE * vd->location;
-		skipsize -= iso9660->current_position;
+		/*
+		 * Validate and compute the additional skip in a width-safe way.
+		 */
+		{
+			uint64_t raw_location = (uint64_t)vd->location;
+			if (raw_location > (UINT64_MAX / (uint64_t)LOGICAL_BLOCK_SIZE)) {
+				archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
+				    "iso9660: volume location overflow or out of range");
+				return (ARCHIVE_FATAL);
+			}
+			uint64_t target64 = raw_location * (uint64_t)LOGICAL_BLOCK_SIZE;
+			if (target64 > (uint64_t)INT64_MAX) {
+				archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
+				    "iso9660: volume location overflow or out of range");
+				return (ARCHIVE_FATAL);
+			}
+			/* Compute relative skip and ensure it fits signed int64_t. */
+			uint64_t rel64;
+			if (target64 < (uint64_t)iso9660->current_position)
+				rel64 = 0; /* No negative relative skip; consume none. */
+			else
+				rel64 = target64 - (uint64_t)iso9660->current_position;
+			if (rel64 > (uint64_t)INT64_MAX) {
+				archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
+				    "iso9660: relative skip overflow or out of range");
+				return (ARCHIVE_FATAL);
+			}
+			skipsize = (int64_t)rel64;
+		}
 		skipsize = __archive_read_consume(a, skipsize);
 		if (skipsize < 0)
 			return ((int)skipsize);
@@ -1162,6 +1209,7 @@ choose_volume(struct archive_read *a, struct iso9660 *iso9660)
 	return (ARCHIVE_OK);
 }
 
+
 static int
 archive_read_format_iso9660_read_header(struct archive_read *a,
     struct archive_entry *entry)
