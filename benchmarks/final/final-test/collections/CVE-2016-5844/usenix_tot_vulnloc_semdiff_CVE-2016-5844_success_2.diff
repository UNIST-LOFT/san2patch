diff --git a/libarchive/archive_read_support_format_iso9660.c b/libarchive/archive_read_support_format_iso9660.c
index 6934ceef..5f95e59e 100644
--- a/libarchive/archive_read_support_format_iso9660.c
+++ b/libarchive/archive_read_support_format_iso9660.c
@@ -1089,9 +1089,26 @@ choose_volume(struct archive_read *a, struct iso9660 *iso9660)
 	if (iso9660->seenJoliet &&
 		vd->location > iso9660->joliet.location)
 		/* This condition is unlikely; by way of caution. */
-		vd = &(iso9660->joliet);
+// FIXME: Crash CWE-190: Integer Overflow or Wraparound (leading to CWE-125: Out-of-bounds Read)
+ 		vd = &(iso9660->joliet);
 
-	skipsize = LOGICAL_BLOCK_SIZE * vd->location;
+	/*
+	 * Rationale: Compute the byte offset using a wider unsigned type to
+	 * detect overflow before assigning into the (signed) skipsize. If the
+	 * computed offset exceeds the maximum signed 32-bit value (the
+	 * original code assumed a 32-bit int), treat the archive as corrupt
+	 * and fail safely to avoid downstream out-of-bounds reads.
+	 */
+	{
+		unsigned long long tmp = (unsigned long long)vd->location *
+					(unsigned long long)LOGICAL_BLOCK_SIZE;
+		if (tmp > 0x7fffffffULL) {
+			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
+			    "ISO9660 volume offset too large or corrupt");
+			return (ARCHIVE_FATAL);
+		}
+		skipsize = (int)tmp;
+	}
 	skipsize = __archive_read_consume(a, skipsize);
 	if (skipsize < 0)
 		return ((int)skipsize);
@@ -1101,8 +1118,7 @@ choose_volume(struct archive_read *a, struct iso9660 *iso9660)
 	if (block == NULL) {
 		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
 		    "Failed to read full block when scanning "
-		    "ISO9660 directory list");
-		return (ARCHIVE_FATAL);
+		    "ISO9660 directory list");		return (ARCHIVE_FATAL);
 	}
 
 	/*
