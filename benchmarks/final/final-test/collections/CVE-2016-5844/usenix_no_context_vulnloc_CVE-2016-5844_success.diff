diff --git a/libarchive/archive_read_support_format_iso9660.c b/libarchive/archive_read_support_format_iso9660.c
index 6934ceef..442a5e55 100644
--- a/libarchive/archive_read_support_format_iso9660.c
+++ b/libarchive/archive_read_support_format_iso9660.c
@@ -1089,9 +1089,33 @@ choose_volume(struct archive_read *a, struct iso9660 *iso9660)
 	if (iso9660->seenJoliet &&
 		vd->location > iso9660->joliet.location)
 		/* This condition is unlikely; by way of caution. */
-		vd = &(iso9660->joliet);
+// FIXME: Crash CWE-125: Out-of-bounds Read (resulting from integer overflow)
+ 		vd = &(iso9660->joliet);
+
+	/*
+	 * Rationale:
+	 * Validate vd->location and perform the multiplication in a wider
+	 * signed type to avoid 32-bit integer overflow that can lead to
+	 * out-of-bounds reads. We check for negative values and ensure the
+	 * product fits in int64_t before using it for reads/consumes.
+	 */
+	if (vd->location < 0) {
+		archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
+		    "Invalid volume descriptor location");
+		return (ARCHIVE_FATAL);
+	}
+	{
+		/* Prevent overflow: ensure vd->location <= INT64_MAX / LOGICAL_BLOCK_SIZE */
+		int64_t max_blocks = INT64_MAX / LOGICAL_BLOCK_SIZE;
+		if ((int64_t)vd->location > max_blocks) {
+			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
+			    "Volume descriptor location is too large");
+			return (ARCHIVE_FATAL);
+		}
+	}
 
-	skipsize = LOGICAL_BLOCK_SIZE * vd->location;
+	/* Safe multiplication in 64-bit space */
+	skipsize = (int64_t)vd->location * (int64_t)LOGICAL_BLOCK_SIZE;
 	skipsize = __archive_read_consume(a, skipsize);
 	if (skipsize < 0)
 		return ((int)skipsize);
