diff --git a/libarchive/archive_read_support_format_iso9660.c b/libarchive/archive_read_support_format_iso9660.c
index 6934ceef..b7a0d03b 100644
--- a/libarchive/archive_read_support_format_iso9660.c
+++ b/libarchive/archive_read_support_format_iso9660.c
@@ -1089,9 +1089,22 @@ choose_volume(struct archive_read *a, struct iso9660 *iso9660)
 	if (iso9660->seenJoliet &&
 		vd->location > iso9660->joliet.location)
 		/* This condition is unlikely; by way of caution. */
-		vd = &(iso9660->joliet);
+// FIXME: Crash CWE-125: Out-of-bounds Read (triggered by integer overflow)
+ 		vd = &(iso9660->joliet);
 
-	skipsize = LOGICAL_BLOCK_SIZE * vd->location;
+	/* Rationale: Prevent signed integer overflow when computing byte offset.
+	 * Compute multiplication in unsigned 64-bit and check it fits in int64_t
+	 * before assigning to skipsize. If it would overflow, fail safely.
+	 */
+	{
+		uint64_t tmp = (uint64_t)vd->location * (uint64_t)LOGICAL_BLOCK_SIZE;
+		if (tmp > (uint64_t)INT64_MAX) {
+			archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
+			    "Invalid ISO9660 volume location (overflow)");
+			return (ARCHIVE_FATAL);
+		}
+		skipsize = (int64_t)tmp;
+	}
 	skipsize = __archive_read_consume(a, skipsize);
 	if (skipsize < 0)
 		return ((int)skipsize);
@@ -1129,7 +1142,18 @@ choose_volume(struct archive_read *a, struct iso9660 *iso9660)
 	    && iso9660->seenJoliet) {
 		/* Switch reading data from primary to joliet. */
 		vd = &(iso9660->joliet);
-		skipsize = LOGICAL_BLOCK_SIZE * vd->location;
+
+		/* Check multiplication for overflow before use. */
+		{
+			uint64_t tmp = (uint64_t)vd->location * (uint64_t)LOGICAL_BLOCK_SIZE;
+			if (tmp > (uint64_t)INT64_MAX) {
+				archive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,
+				    "Invalid ISO9660 volume location (overflow)");
+				return (ARCHIVE_FATAL);
+			}
+			skipsize = (int64_t)tmp;
+		}
+
 		skipsize -= iso9660->current_position;
 		skipsize = __archive_read_consume(a, skipsize);
 		if (skipsize < 0)
@@ -1162,6 +1186,7 @@ choose_volume(struct archive_read *a, struct iso9660 *iso9660)
 	return (ARCHIVE_OK);
 }
 
+
 static int
 archive_read_format_iso9660_read_header(struct archive_read *a,
     struct archive_entry *entry)
