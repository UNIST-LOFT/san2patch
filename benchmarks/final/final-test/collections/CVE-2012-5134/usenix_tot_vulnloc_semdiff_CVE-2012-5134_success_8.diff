diff --git a/parser.c b/parser.c
index 0d8d7f2e..7df4620b 100644
--- a/parser.c
+++ b/parser.c
@@ -4066,27 +4066,32 @@ xmlParseAttValueComplex(xmlParserCtxtPtr ctxt, int *attlen, int normalize) {
 		if (len + 10 > buf_size) {
 		    growBuffer(buf, 10);
 		}
-	    }
-	    NEXTL(l);
-	}
-	GROW;
-	c = CUR_CHAR(l);
-    }
-    if (ctxt->instate == XML_PARSER_EOF)
-        goto error;
-
-    if ((in_space) && (normalize)) {
-        while (buf[len - 1] == 0x20) len--;
-    }
-    buf[len] = 0;
-    if (RAW == '<') {
-	xmlFatalErr(ctxt, XML_ERR_LT_IN_ATTRIBUTE, NULL);
-    } else if (RAW != limit) {
-	if ((c != 0) && (!IS_CHAR(c))) {
-	    xmlFatalErrMsg(ctxt, XML_ERR_INVALID_CHAR,
-			   "invalid character in attribute value\n");
-	} else {
-	    xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,
+ 	    }
+ 	    NEXTL(l);
+ 	}
+ 	GROW;
+ 	c = CUR_CHAR(l);
+     }
+     if (ctxt->instate == XML_PARSER_EOF)
+         goto error;
+ // FIXME: Crash CWE-125: Out-of-bounds Read
+ 
+     if ((in_space) && (normalize)) {
+         /* Rationale: Prevent reading buf[len - 1] when len == 0 or buf is NULL.
+          * Guard the condition to ensure no underflow/read-before-allocation occurs.
+          */
+         while ((len > 0) && (buf != NULL) && (buf[len - 1] == 0x20)) len--;
+     }
+     buf[len] = 0;
+     if (RAW == '<') {
+ 	xmlFatalErr(ctxt, XML_ERR_LT_IN_ATTRIBUTE, NULL);
+     } else if (RAW != limit) {
+ 	if ((c != 0) && (!IS_CHAR(c))) {
+ 	    xmlFatalErrMsg(ctxt, XML_ERR_INVALID_CHAR,
+ 			   "invalid character in attribute value\n");
+ 	} else {
+ 	    xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,
+ 
 			   "AttValue: ' expected\n");
         }
     } else
