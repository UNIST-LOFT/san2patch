diff --git a/parser.c b/parser.c
index 0d8d7f2e..0a937282 100644
--- a/parser.c
+++ b/parser.c
@@ -4047,7 +4047,7 @@ xmlParseAttValueComplex(xmlParserCtxtPtr ctxt, int *attlen, int normalize) {
 		    for (;i > 0;i--)
 			buf[len++] = *cur++;
 		    buf[len++] = ';';
-		}
+			}
 	    }
 	} else {
 	    if ((c == 0x20) || (c == 0xD) || (c == 0xA) || (c == 0x9)) {
@@ -4074,9 +4074,16 @@ xmlParseAttValueComplex(xmlParserCtxtPtr ctxt, int *attlen, int normalize) {
     }
     if (ctxt->instate == XML_PARSER_EOF)
         goto error;
-
+// FIXME: Crash
+ 
     if ((in_space) && (normalize)) {
-        while (buf[len - 1] == 0x20) len--;
+        /*
+         * Prevent underflow when len == 0: the original code accessed
+         * buf[len - 1] without checking len, which can read before the
+         * allocated buffer and cause a heap-buffer-overflow. Ensure we
+         * only inspect buf[len - 1] when len > 0.
+         */
+        while ((len > 0) && (buf[len - 1] == 0x20)) len--;
     }
     buf[len] = 0;
     if (RAW == '<') {
@@ -4084,10 +4091,10 @@ xmlParseAttValueComplex(xmlParserCtxtPtr ctxt, int *attlen, int normalize) {
     } else if (RAW != limit) {
 	if ((c != 0) && (!IS_CHAR(c))) {
 	    xmlFatalErrMsg(ctxt, XML_ERR_INVALID_CHAR,
-			   "invalid character in attribute value\n");
+		           "invalid character in attribute value\n");
 	} else {
 	    xmlFatalErrMsg(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,
-			   "AttValue: ' expected\n");
+		           "AttValue: ' expected\n");
         }
     } else
 	NEXT;
@@ -4107,6 +4114,7 @@ xmlParseAttValueComplex(xmlParserCtxtPtr ctxt, int *attlen, int normalize) {
 
 mem_error:
     xmlErrMemory(ctxt, NULL);
+
 error:
     if (buf != NULL)
         xmlFree(buf);
